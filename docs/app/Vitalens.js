importScripts("https://cdn.jsdelivr.net/pyodide/v0.26.2/full/pyodide.js");

function sendPatch(patch, buffers, msg_id) {
  self.postMessage({
    type: 'patch',
    patch: patch,
    buffers: buffers
  })
}

async function startApplication() {
  console.log("Loading pyodide!");
  self.postMessage({type: 'status', msg: 'Loading pyodide'})
  self.pyodide = await loadPyodide();
  self.pyodide.globals.set("sendPatch", sendPatch);
  console.log("Loaded!");
  await self.pyodide.loadPackage("micropip");
  const env_spec = ['https://cdn.holoviz.org/panel/wheels/bokeh-3.5.2-py3-none-any.whl', 'https://cdn.holoviz.org/panel/1.5.0/dist/wheels/panel-1.5.0-py3-none-any.whl', 'pyodide-http==0.2.1', 'branca', 'fiona', 'folium', 'geopandas', 'lonboard', 'numpy', 'pandas', 'printingReport', 'scipy', 'shapely', 'sourcetypes']
  for (const pkg of env_spec) {
    let pkg_name;
    if (pkg.endsWith('.whl')) {
      pkg_name = pkg.split('/').slice(-1)[0].split('-')[0]
    } else {
      pkg_name = pkg
    }
    self.postMessage({type: 'status', msg: `Installing ${pkg_name}`})
    try {
      await self.pyodide.runPythonAsync(`
        import micropip
        await micropip.install('${pkg}');
      `);
    } catch(e) {
      console.log(e)
      self.postMessage({
	type: 'status',
	msg: `Error while installing ${pkg_name}`
      });
    }
  }
  console.log("Packages loaded!");
  self.postMessage({type: 'status', msg: 'Executing code'})
  const code = `
  \nimport asyncio\n\nfrom panel.io.pyodide import init_doc, write_doc\n\ninit_doc()\n\nimport geopandas as gpd\nimport pandas as pd\nimport panel as pn\nimport numpy as np\nimport fiona\nfrom bokeh.models.formatters import PrintfTickFormatter\nimport folium\nfrom folium.features import Template, DivIcon\n# import keplergl\nfrom shapely.geometry import shape, Polygon, Point\nfrom lonboard import Map, PathLayer, ScatterplotLayer\nimport branca\nfrom branca.element import Template, MacroElement\nfrom functools import partial\nimport printingReport\nimport html\nfrom io import StringIO\nimport sourcetypes\nfrom scipy.optimize import curve_fit\nfrom panel.custom import JSComponent\n\n\n# Styling\nglobalCss_route= "Stylesheet.css"\ncssStyle = ['''            \n/* Import Google Fonts */\n@import url("https://fonts.googleapis.com/css2?family=Barlow:ital,wght@0,100;0,200;0,300;0,400;0,500;0,600;0,700;0,800;0,900;1,100;1,200;1,300;1,400;1,500;1,600;1,700;1,800;1,900&display=swap");\n\n:host,\n:root {\n  --design-primary-color: #151931 !important;\n  --design-secondary-color: #00B893 !important;\n  --design-primary-text-color: #f2f2ed !important;\n  --design-secondary-text-color: #151931 !important;\n  --bokeh-base-font: "Barlow", sans-serif, Verdana !important;\n  --mdc-typography-font-family: "Barlow", sans-serif, Verdana !important;\n  --panel-primary-color: #151931 !important;\n  --panel-background-color: #f2f2ed !important;\n  --panel-on-background-color: #151931 !important;\n  --sidebar-width: 350px;\n}\n\n:host(.active) .bar {\n    background-color: #ffc233 !important;    \n}\n\n:host(.bk-above) .bk-header .bk-tab{\n    border: #F2F2ED !important;\n    background: #00000014 !important\n}\n\n\n::-webkit-scrollbar-track\n{\n\tbackground-color: #F5F5F5;\n}\n\n::-webkit-scrollbar\n{\n\twidth: 5px !important; \n\tbackground-color: #F5F5F5;\n}\n\n::-webkit-scrollbar-thumb\n{\n\tbackground-color: #CCC5B9 !important;\n    radius: 1px\n}\n\n#sidebar, #main {\n    background-color: #F2F2ED !important;\n}\n\nhr.dashed {\n  border-top: 1px dashed;\n  border-bottom: none;\n}\n\n.title {\n  font-weight: 600 !important;\n}\n\n.bar {\n        background-color: #b1b1c9;\n    }\n\n.bk-btn {\n  border-radius: 0.5em !important;\n}\n\n.bk-btn bk-btn-primary {\n    font-size: normal !important;\n}\n\n.bk-btn-group {\n  height: 100%;\n  display: flex;\n  flex-wrap: inherit !important;\n  align-items: center;\n}\n\n.bk-btn-primary{\n    font-size: normal !important;\n}\n\n.bk-btn-success{\n  background-position: center;\n  font-weight: 400 !important;\n  font-size: small !important;\n  line-height: 1;\n  margin: 3px 3px; \n  padding: 5px 10px !important;\n  transition: background 0.8s;\n  width: fit-content;\n}\n\n.bk-btn-warning {\n  margin: 3px;   \n}\n\n.accordion-header button{\n    color: #151931;\n    background-color: #B4BFE4;\n}\n\n\n.bk-tab.bk-active {\n    background: #d3d3cf !imporant;\n    color: #d9534f !important;\n}\n\n.maplegend .legend-title {\n            text-align: left;\n            margin-bottom: 5px;\n            font-weight: bold;\n            font-size: 90%;\n            }\n.maplegend .legend-scale ul {\n    margin: 0;\n    margin-bottom: 5px;\n    padding: 0;\n    float: left;\n    list-style: none;\n    }\n.maplegend .legend-scale ul li {\n    list-style: none;\n    margin-left: 0;\n    line-height: 18px;\n    margin-bottom: 2px;\n    }\n.maplegend ul.legend-labels li span {\n    font-size: smaller;\n    display: block;\n    float: left;\n    height: 16px;\n    width: 30px;\n    margin-right: 5px;\n    margin-left: 0;\n    border: 1px solid #999;\n    }\n.maplegend .legend-source {\n    font-size: 80%;\n    color: #777;\n    clear: both;\n    }\n.maplegend a {\n    color: #777;\n    }\n    \n.Label {\n    text-shadow:\n    -1px -1px 0 #fff,\n    1px -1px 0 #fff,\n    -1px 1px 0 #fff,\n    1px 1px 0 #fff;  \n}\n\n'''\n]\n\nminiBox_style = {\n    'background': '#e9e9e1',\n    'border': '0.7px solid',\n    'margin': '10px',\n    "box-shadow": '4px 2px 6px #2a407e',\n    "display": "flex"\n}\n\nbuttonGroup_style = {\n    'flex-wrap': 'wrap',\n    'display': 'flex'\n}\n\njs_legend = '''\n    $(function() {\n        // Ensure the element exists before making it draggable\n        if ($('#maplegend').length) {\n            $('#maplegend').draggable({\n                start: function(event, ui) {\n                    // Reset positioning constraints to allow free dragging\n                    $(this).css({\n                        right: 'auto',   // Reset 'right' so the element can move left\n                        top: 'auto',     // Reset 'top' so it can move freely\n                        bottom: 'auto'   // Reset 'bottom' to enable dragging downward\n                    });\n                }\n            });\n        } else {\n            console.error("Element #maplegend not found.");\n        }\n    });\n'''\n\njs_files = {'leaflet-dataclassification': 'https://raw.githubusercontent.com/balladaniel/leaflet-dataclassification/master/dist/leaflet-dataclassification.js',\n            'jsLegend': './Assets/test.js'}\n\n# Initialize extensions\npn.config.global_css = cssStyle\npn.config.css_files = cssStyle\npn.config.loading_spinner = 'petal'\npn.extension(sizing_mode="stretch_width")\npn.extension("plotly")\n# pn.extension("ipywidgets")\npn.extension("echarts")\npn.extension(\n    "tabulator", "ace", css_files=["https://unpkg.com/leaflet@1.7.1/dist/leaflet.css"]\n)\npn.extension('floatpanel')\npn.extension(notifications=True)\npn.extension(js_files=js_files)\n\n# VARIABLES\nGPKG_FILE = "./Assets/Thematic_Data.gpkg"\nLAYER_WELLS =  "Well_Capacity_Cost"\nLAYER_INDUSTRIAL_WELLS = "Industrial_Extraction"\nLAYER_PIPES = "Pipes_OD"\nNATURE_DAMAGE_CSV = pd.read_csv("./Assets/NatuurEffect.csv")\nCITIES_LAYER = "CitiesHexagonal"\nYEAR_CALC = 2022\nGROW_RATE = 0.0062\nSMALL_BUSINESS_RATE = 1.2\nDEMAND_PERCAPITA = 0.135\n\n\n# Optimized Data Loading: Read all layers and then filter the required columns\ndef load_data(file_path):\n    wells = gpd.read_file(file_path, layer=LAYER_WELLS)\n    industrial = gpd.read_file(file_path, layer=LAYER_INDUSTRIAL_WELLS)\n    main_pipes = gpd.read_file(file_path, layer=LAYER_PIPES)\n    cities = gpd.read_file(file_path, layer=CITIES_LAYER)\n    return wells, industrial, main_pipes, cities\n\nwells, industrial, main_pipes, cities = load_data(GPKG_FILE)\n\n# Standardize CRS once for all datasets\ntarget_crs = "EPSG:28992"\nwells = wells.to_crs(target_crs)\nindustrial = industrial.to_crs(target_crs)\nmain_pipes = main_pipes.to_crs(target_crs)\ncities = cities.to_crs(target_crs)\n\n# Convert the capacity columns to numeric, setting errors='coerce' will replace non-numeric values with NaN\nwells["Permit__Mm3_per_jr_"] = pd.to_numeric(\n    wells["Permit__Mm3_per_jr_"], errors="coerce"\n)\nwells["Extraction_2023__Mm3_per_jr_"] = pd.to_numeric(\n    wells["Extraction_2023__Mm3_per_jr_"], errors="coerce"\n)\nwells["Agreement__Mm3_per_jr_"] = pd.to_numeric(\n    wells["Agreement__Mm3_per_jr_"], errors="coerce"\n)\n\n# Calculate total costs per m3\nwells["totOpex_m3"] = (\n    wells["OPEX"]\n    + wells["Labor_EUR_m3"]\n    + wells["Energy_EUR_m3"]\n    + wells["Chemicals_EUR_m3"]\n    + wells["Tax_EUR_m3"]\n)\nwells["env_cost_m3"] = wells["CO2Cost_EUR_m3"] + wells["DroughtDamage_EUR_m3"]\n\n# Initialize a DataFrame to hold the active state and slider values\nactive_wells_df = gpd.GeoDataFrame(\n    {\n        "Name": wells["Name"],\n        "Num_Wells": wells["Num_Wells"],\n        "Ownership": wells["Inside_Prop"],\n        "Max_permit": wells["Permit__Mm3_per_jr_"],\n        "Balance area": wells["Balansgebied"],\n        "Active": [True] * len(wells),\n        "Current Extraction": wells["Extraction_2023__Mm3_per_jr_"],\n        "Value": wells["Extraction_2023__Mm3_per_jr_"],\n        "OPEX_m3": wells["totOpex_m3"],\n        "Drought_m3": wells["DroughtDamage_EUR_m3"],\n        "CO2_m3": wells["CO2Cost_EUR_m3"],\n        "Env_m3": wells["env_cost_m3"],\n        "envCost": wells["env_cost_m3"]\n        * wells["Extraction_2023__Mm3_per_jr_"]\n        * 1e6,\n        "OPEX": wells["totOpex_m3"] * wells["Extraction_2023__Mm3_per_jr_"] * 1e6,\n        "CAPEX": 0,\n        "geometry": wells["geometry"],\n    }\n)\nactive_wells_df.astype({"Num_Wells": "int32", "Ownership": "int32"}, copy=False)\n\n\noriginal_OPEX = active_wells_df["OPEX"].sum()/1e6\noriginal_CO2 = (active_wells_df["CO2_m3"]*active_wells_df["Current Extraction"]).sum()\noriginal_Draught = (active_wells_df["Drought_m3"]*active_wells_df["Current Extraction"]).sum()\noriginal_excess = active_wells_df["Max_permit"].sum() - active_wells_df["Current Extraction"].sum()\n\ncities = gpd.read_file(GPKG_FILE, layer="CitiesHexagonal")\n\ncities_clean = gpd.GeoDataFrame(\n    {\n        "cityName" : cities["statnaam"],\n        "Population 2022": cities["SUM_Pop_2022"],\n        "Water Demand": cities["SUM_Water_Demand_m3_YR"]/ 1e6,\n        "geometry" : cities["geometry"]\n    })\n\ncities_clean.loc[cities_clean["cityName"].isna(), "Water Demand"] = None\n\ndemand_capita, smallBusiness = DEMAND_PERCAPITA, SMALL_BUSINESS_RATE\n\n# Get Destination Attributes\nhexagons = gpd.read_file(GPKG_FILE, layer="H3_Lvl8")\n\n# Create a new column 'Type_T' with default values\nhexagons["Type_T"] = ""\n\n# Iterate over rows and assign values based on the 'Type' column\nfor idx, row in hexagons.iterrows():\n    if row["Type"] == 1:\n        hexagons.at[idx, "Type_T"] = "Source"\n    elif row["Type"] == 2:\n        hexagons.at[idx, "Type_T"] = "Destination"\n    elif row["Type"] == 3:\n        hexagons.at[idx, "Type_T"] = "Restricted Natura2000"\n    elif row["Type"] == 4:\n        hexagons.at[idx, "Type_T"] = "Restricted Other"\n    elif row["Type"] == 5:\n        hexagons.at[idx, "Type_T"] = "Source and Restricted"\n    else:\n        hexagons.at[idx, "Type_T"] = "Germany"\n\nhexagons_filterd = gpd.GeoDataFrame(\n    {\n        "GRID_ID": hexagons["GRID_ID"],\n        "Balance Area": hexagons["Name"],\n        "Pop2022": hexagons["Pop_2022"],\n        "Current Pop": hexagons["Pop_2022"],\n        "Industrial Demand": hexagons["Ind_Demand"],\n        "Water Demand": hexagons["Pop_2022"] * demand_capita * smallBusiness * 365 / 1e6,\n        "Type": hexagons["Type_T"],\n        "Source_Name": hexagons["Source_Name"],\n        "geometry": hexagons["geometry"],\n    }, copy=False\n)\noriginal_demand = hexagons_filterd["Water Demand"].sum()+hexagons_filterd["Industrial Demand"].sum()\n\nbalance_areas= hexagons_filterd.dissolve(by="Balance Area", as_index=False)\n\nnaturaUnfiltered = NATURE_DAMAGE_CSV\nnaturaDamageMid = pd.DataFrame()\n\nnaturaDamageMid["Name"] = active_wells_df["Name"]\nfor index, row in active_wells_df.iterrows():\n    name = row["Name"]\n    ratio_column = (row["Current Extraction"]/row["Max_permit"])*100\n    \n    # Get the corresponding row from naturaUnfiltered based on the well name\n    well_data = naturaUnfiltered.loc[naturaUnfiltered["WELL"] == name, "C-S"]\n    \n    if not well_data.empty:  # Check if there's data for the well\n        # Create a column in naturaDamage with the extraction ratio as part of the column name\n        naturaDamageMid.loc[naturaDamageMid["Name"] == name, f'{ratio_column:.0f}'] = well_data.values[0]  # Assuming single value extraction\n    \n    \n    well_data = naturaUnfiltered.loc[naturaUnfiltered["WELL"] == name, "85-S"]\n    if not well_data.empty:\n        naturaDamageMid.loc[naturaDamageMid["Name"] == name, "85"] = well_data.values[0]\n    \n    well_data = naturaUnfiltered.loc[naturaUnfiltered["WELL"] == name, "P-S"]\n    if not well_data.empty: naturaDamageMid.loc[naturaDamageMid["Name"] == name, "100"] = well_data.values[0]\n    \n    well_data = naturaUnfiltered.loc[naturaUnfiltered["WELL"] == name, "115-S"]\n    if not well_data.empty: naturaDamageMid.loc[naturaDamageMid["Name"] == name, "115"] = well_data.values[0]\n    \n\nnaturaDamageHigh = pd.DataFrame()\n\n\nnaturaDamageHigh["Name"] = active_wells_df["Name"]\nfor index, row in active_wells_df.iterrows():\n    name = row["Name"]\n    ratio_column = (row["Current Extraction"]/row["Max_permit"])*100\n    \n    # Get the corresponding row from naturaUnfiltered based on the well name\n    well_data = naturaUnfiltered.loc[naturaUnfiltered["WELL"] == name, "C-VS"]\n    \n    if not well_data.empty:  # Check if there's data for the well\n        # Create a column in naturaDamage with the extraction ratio as part of the column name\n        naturaDamageHigh.loc[naturaDamageHigh["Name"] == name, f'{ratio_column:.0f}'] = well_data.values[0]  # Assuming single value extraction\n    \n    \n    well_data = naturaUnfiltered.loc[naturaUnfiltered["WELL"] == name, "85-VS"]\n    if not well_data.empty:\n        naturaDamageHigh.loc[naturaDamageHigh["Name"] == name, "85"] = well_data.values[0]\n    \n    well_data = naturaUnfiltered.loc[naturaUnfiltered["WELL"] == name, "P-VS"]\n    if not well_data.empty: naturaDamageHigh.loc[naturaDamageHigh["Name"] == name, "100"] = well_data.values[0]\n    \n    well_data = naturaUnfiltered.loc[naturaUnfiltered["WELL"] == name, "115-VS"]\n    if not well_data.empty: naturaDamageHigh.loc[naturaDamageHigh["Name"] == name, "115"] = well_data.values[0]\n\n    \nindustrialExcess = 0\n\ndef calculate_total_extraction():\n    """\n    Calculate the total water extraction from active wells.\n\n    Returns:\n        float: Total water extraction in Mm3/yr.\n    """\n    global industrialExcess\n    total = active_wells_df[active_wells_df["Active"]]["Value"].sum() + industrialExcess\n    return total\n\ndef calculate_difference():\n    """\n    Calculate the total water extraction from active wells.\n\n    Returns:\n        float: Total water extraction in Mm3/yr.\n    """\n    total = calculate_total_extraction() - calculate_total_Demand()\n    return total\n\ndef calculate_available():\n    """\n    Calculate the available water by subtracting the current extraction from the maximum permitted extraction.\n\n    Returns:\n        float: Available water in Mm3/yr.\n    """\n    total = (\n        active_wells_df["Max_permit"].sum()\n        - active_wells_df[active_wells_df["Active"]==True]["Value"].sum()\n    ) \n    return total\n\ndef calculate_industrial_extract():\n    total = industrial["Current_Extraction_2019"].sum()\n    return total\n\ndef calculate_ownership():\n    """\n    Calculate the percentage of land ownership for active wells.\n\n    Returns:\n        float: Percentage of land ownership.\n    """\n    total = (\n        active_wells_df[active_wells_df["Active"]]["Ownership"].sum()\n        / active_wells_df[active_wells_df["Active"]]["Num_Wells"].sum()\n    )\n    return total * 100\n\ndef calculate_total_OPEX():\n    """\n    Calculate the total operational expenditure (OPEX) for active wells.\n\n    Returns:\n        float: Total OPEX in million EUR/yr.\n    """\n    active_wells_df["OPEX"] = active_wells_df["OPEX_m3"] * active_wells_df["Value"] \n\n    total = (active_wells_df[active_wells_df["Active"]]["OPEX"]).sum()\n    return total\n\ndef calculate_total_CAPEX():\n    # CAPEX is the difference between Value and current extraction, if Value is higher\n    active_wells_df["CAPEX"] = np.where(\n        active_wells_df["Value"] > active_wells_df["Current Extraction"],\n        (active_wells_df["Value"] - active_wells_df["Current Extraction"]) * 10,  # You can adjust the multiplier as needed\n        0  # CAPEX is 0 if Value is less than or equal to current extraction\n    )\n\n    # Sum the CAPEX for all active wells\n    total = active_wells_df[active_wells_df["Active"]]["CAPEX"].sum()\n    return total   # Convert to million EUR\n#   \n\n\ndef calculate_total_OPEX_by_balance():\n    """\n    Calculate the total OPEX grouped by balance areas.\n\n    Returns:\n        pd.Series: Total OPEX by balance area in million EUR/yr.\n    """\n    return (\n        active_wells_df[active_wells_df["Active"]].groupby("Balance area")["OPEX"].sum()\n    )/1e6\n\n# def update_balance_opex():\n#     """\n#     Update OPEX indicators for balance areas.\n#     """\n#     balance_opex = calculate_total_OPEX_by_balance()\n#     for balance, indicator in balance_opex_indicators.items():\n#         indicator.value = balance_opex.get(balance, 0)\n\ndef calculate_total_envCost():\n    """\n    Calculate the total environmental cost for active wells.\n\n    Returns:\n        float: Total environmental cost.\n    """\n    total = (active_wells_df[active_wells_df["Active"]]["envCost"]).sum()\n    return total\n\ndef calculate_total_envCost_by_balance():\n    """\n    Calculate the total environmental cost grouped by balance areas.\n\n    Returns:\n        pd.Series: Total environmental cost by balance area.\n    """\n    return (\n        active_wells_df[active_wells_df["Active"]]\n        .groupby("Balance area")["envCost"]\n        .sum()\n    )\n\ndef calculate_affected_Sensitive_Nature():\n    """\n    Calculate the total affected area by Natura2000 restrictions.\n\n    Returns:\n        float: Total affected area in hectares.\n    """\n    names = active_wells_df[active_wells_df["Active"]==True]\n    \n    midDamage = 0\n    \n    for index, row in names.iterrows():\n        name = row["Name"]\n        target = (row["Value"]/row["Max_permit"])*100\n        mDamage = estimate_Damage_for_well(naturaDamageMid, name, target) or 0\n\n    \n        midDamage = midDamage + mDamage\n\n    \n    # restricted = hexagons_filterd[\n    #     (hexagons_filterd["Source_Name"].isin(names))\n    #     & (hexagons_filterd["Type"] == "Source and Restricted")\n    # ]\n    # total = restricted.shape[0]\n    # ha = total * 629387.503078 / 100000\n    return midDamage\n\ndef calculate_affected_VerySensitive_Nature():\n    """\n    Calculate the total affected area by Natura2000 restrictions.\n\n    Returns:\n        float: Total affected area in hectares.\n    """\n    names = active_wells_df[active_wells_df["Active"]==True]\n    \n    midDamage = 0\n    for index, row in names.iterrows():\n        name = row["Name"]\n        target = (row["Value"]/row["Max_permit"])*100\n        mDamage = estimate_Damage_for_well(naturaDamageHigh, name, target) or 0\n    \n        midDamage = midDamage + mDamage\n\n    \n    # restricted = hexagons_filterd[\n    #     (hexagons_filterd["Source_Name"].isin(names))\n    #     & (hexagons_filterd["Type"] == "Source and Restricted")\n    # ]\n    # total = restricted.shape[0]\n    # ha = total * 629387.503078 / 100000\n    return midDamage\n\ndef generate_area_SVG (n):\n    SVG = '''<?xml version="1.0" encoding="UTF-8"?><svg id="Layer_1" height="45px" width="45px" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 64 64"><defs><style>.cls-1{stroke-linejoin:bevel;}.cls-1,.cls-2,.cls-3,.cls-4,.cls-5,.cls-6{fill:none;}.cls-1,.cls-3,.cls-4{stroke-width:.7px;}.cls-1,.cls-3,.cls-4,.cls-5,.cls-6{stroke:#e6e6e6;}.cls-1,.cls-4,.cls-5{stroke-linecap:round;}.cls-7{fill:#9bc45b;}.cls-3,.cls-8,.cls-4,.cls-6{stroke-miterlimit:10;}.cls-8{fill:#ccc;stroke:#ccc;}.cls-5{stroke-linejoin:round;}.cls-5,.cls-6{stroke-width:.4px;}.cls-9{fill:#b3b3b3;}.cls-10{clip-path:url(#clippath);}</style><clipPath id="clippath"><path class="cls-2" d="M26.52,4.49c2.42.46,4.79,1.44,7.25,1.25,2.49-.18,4.78-1.54,7.27-1.72,3.17-.24,6.61,1.39,9.39-.15,1.9-1.05,3.24-3.49,5.4-3.34,1.12.08,2.07.91,2.61,1.89s.73,2.11.9,3.22c2.76,17.36,3.68,34.95,4.6,52.5.05.98-.03,2.19-.91,2.61-.5.23-1.08.12-1.61,0-8.39-1.89-16.69-4.15-24.99-6.41-3.43-.94-6.86-1.87-10.3-2.81-1.56-.42-3.16-.87-4.46-1.83-2.55-1.89-3.35-5.28-4.07-8.37-.68-2.9-1.64-6.07-4.18-7.63-1.52-.93-3.43-1.16-4.79-2.3-1.3-1.09-1.86-2.8-2.31-4.43-.74-2.72-1.3-5.49-1.69-8.28-.19-1.4-.35-2.8-.45-4.21-.07-.97-.55-2.93-.14-3.83.68-1.48,4.61-2.59,6.06-3.24,2.49-1.1,5.06-2.07,7.73-2.65,2.85-.63,5.81-.81,8.68-.26Z"/></clipPath></defs><path class="cls-7" d="M26.52,4.49c2.42.46,4.79,1.44,7.25,1.25,2.49-.18,4.78-1.54,7.27-1.72,3.17-.24,6.61,1.39,9.39-.15,1.9-1.05,3.24-3.49,5.4-3.34,1.12.08,2.07.91,2.61,1.89s.73,2.11.9,3.22c2.76,17.36,3.68,34.95,4.6,52.5.05.98-.03,2.19-.91,2.61-.5.23-1.08.12-1.61,0-8.39-1.89-16.69-4.15-24.99-6.41-3.43-.94-6.86-1.87-10.3-2.81-1.56-.42-3.16-.87-4.46-1.83-2.55-1.89-3.35-5.28-4.07-8.37-.68-2.9-1.64-6.07-4.18-7.63-1.52-.93-3.43-1.16-4.79-2.3-1.3-1.09-1.86-2.8-2.31-4.43-.74-2.72-1.3-5.49-1.69-8.28-.19-1.4-.35-2.8-.45-4.21-.07-.97-.55-2.93-.14-3.83.68-1.48,4.61-2.59,6.06-3.24,2.49-1.1,5.06-2.07,7.73-2.65,2.85-.63,5.81-.81,8.68-.26Z"/><g class="cls-10"><path class="cls-8" d="M61.19,60.69c-3.27.07-6.45-1.04-9.49-2.24-.73-.29-1.46-.58-2.24-.7-.72-.11-1.45-.08-2.17-.16-1.02-.12-2.02-.48-2.82-1.11s-1.41-1.53-1.61-2.54c-.18-.9-.02-1.84-.16-2.75-.18-1.19-.87-2.29-1.87-2.96l4.23-1.21,2.65-1.09,2.62-1.45,2.44-.2-4.95,11.67.24.95,13.14,3.79Z"/><path class="cls-4" d="M34.71,28.24c3.5,9.05,5.02,9.96,5.97,19.7"/><path class="cls-9" d="M31.4,20.57l-.74.29,2.33,6.5.57.64s.88.62,2.36-.5,1.87-2.08,1.87-2.08c0,0,1.11-3.06,0-3.74s-2.05-1.32-3.32-1.37-3.08.26-3.08.26Z"/><path class="cls-5" d="M20.56,18.27c-.43-1.19.03-2.19.85-3.14s1.96-1.58,3.1-2.13c2.27-1.12,4.66-2.08,7.18-2.31,3.73-.34,7.4.96,10.87,2.38,1.83.75,3.67,1.56,5.13,2.89,1.97,1.79,3.06,4.33,3.86,6.87,1.59,5.07,2.2,10.44,1.86,15.74-.09,1.43-.27,2.92-1.08,4.1-.63.93-1.58,1.59-2.55,2.16-3.14,1.87-6.69,3.13-10.35,3.29-3.65.17-7.4-.81-10.32-3.01-4.03-3.04-6.11-8.04-7.1-12.99-1-4.95-.43-8.91-1.45-13.85"/><path class="cls-6" d="M27.07,15.76c1.85-.96,4.05-.99,6.13-.73,3.98.49,7.98,2.04,10.62,5.04,3.2,3.64,3.97,8.75,4.61,13.55.17,1.29.33,2.64-.12,3.86-.74,2.01-2.89,3.06-4.85,3.92-2.42,1.07-5.06,2.16-7.64,1.56-2.24-.52-4.01-2.24-5.43-4.05-3.97-5.07-6.75-12.35-6.25-18.88.14-1.81,1.32-3.44,2.92-4.27Z"/><path class="cls-4" d="M4.48,22.48c8.35-2.28,18.94-3.49,27.48-2.06.42.07.79-.29.72-.71-.4-2.23-1.04-4.41-1.33-6.65-.32-2.53-.14-5.25,1.24-7.4"/><path class="cls-4" d="M29.67,45.35c1.02-2.69,3.03-4.67,5.56-6.05s5.33-2.14,8.1-2.89c3.41-.92,6.49-1.85,9.9-2.77"/><path class="cls-4" d="M50.34,20.14c-1.33.33-2.18,1.58-2.99,2.68s-1.87,2.26-3.24,2.25c-1.27,0-2.27-1.01-3.25-1.8-2.32-1.87-6.03-2.91-9.01-2.84"/><path class="cls-4" d="M44.53,14.2c-.38,1.46-.93,3.13-2.34,3.69-.64.26-1.37.23-2.01.47-1.5.56-2.1,2.32-2.53,3.86-.32,1.17-.56,2.62.35,3.41.47.4,1.11.5,1.71.66,2.84.76,5.09,3.39,5.4,6.32.07.65.52,2.5.7,3.13"/><path class="cls-4" d="M13.9,34.05c.98-2.27,1.97-4.55,3.1-6.75.67-1.3,1.39-2.58,1.72-4,.84-3.6-.99-7.24-1.35-10.92-.23-2.35.53-8.33.91-10.66"/><path class="cls-4" d="M14.52,34.97c.91.92.93,2.53,1.98,3.28.67.48,1.57.46,2.37.27,2.8-.66,5.74-3.25,8.57-3.8"/><path class="cls-1" d="M52.55,25.9l5.15-18.43c.97-.67,2.27-1.01,3.44-1.13"/><path class="cls-3" d="M44.94,14.1c.88-3.08,1.88-6.19,3.65-8.86S53.02.34,56.17-.26"/></g></svg>\n   '''\n    \n    HaSVG = 31.74\n    full = int(n/HaSVG)\n    leftover = (n % 1)\n    segment = leftover*45\n \n    \n    partialSVG = '''\n    <?xml version="1.0" encoding="UTF-8"?><svg height="45px" width="45px" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 64 64"><defs><style>.cls-1,.cls-2{fill:#777;}.cls-1,.cls-3{stroke:#fff;stroke-linecap:round;stroke-linejoin:round;}.cls-4{fill:#29abe2;}.cls-5{fill:#ee8700;}.cls-6{fill:#fff;}.cls-7{mask:url(#mask);}.cls-8{fill:#b8002b;}.cls-9{fill:#64c37d;}.cls-10{isolation:isolate;}.cls-11{mix-blend-mode:multiply;}.cls-12{fill:#a4e276;}.cls-13{mix-blend-mode:hue;}.cls-14{fill:#d8143a;}.cls-3{fill:none;}.cls-15{fill:#22b573;}.cls-16{mix-blend-mode:saturation;}'''+f'''</style><mask id="mask" x="8" y="0" width="47" height="45" maskUnits="userSpaceOnUse"><rect class="cls-6" x="8" y="0" width="47" height="{segment}"/></mask>'''+'''</defs><g class="cls-10"><g id="Layer_1"><g class="cls-11"><g class="cls-16"><path class="cls-15" d="M34,63c-.12,0-.23-.04-.32-.12l-19-16c-.06-.05-.1-.11-.13-.18l-5-11c-.09-.19-.05-.41.1-.56l3-3,1.85-2.8v-2.85c0-.09.02-.18.07-.26L29.57,1.24c.09-.16.26-.24.43-.24.08,0,.16.02.23.06l21,11c.12.06.21.18.25.31s.01.28-.06.4l-6.7,10.53,9.5,4.75c.13.06.23.18.26.32.04.14,0,.29-.08.41l-6.76,9.66,1.7,1.7c.17.17.19.43.06.63l-4,6c-.06.09-.15.16-.26.2l-2.82.94-2.76,4.61.88,1.75c.08.17.07.37-.05.52l-6,8c-.08.11-.21.18-.34.2-.02,0-.04,0-.06,0Z"/><path class="cls-15" d="M30,1.5l21,11-7,11,10,5-7,10,2,2-4,6-3,1-3,5,1,2-6,8-19-16-5-11,3-3,2-3v-3L30,1.5M30,.5c-.34,0-.67.17-.86.49l-15,25c-.09.16-.14.33-.14.51v2.7l-1.78,2.67-2.93,2.93c-.29.29-.38.74-.2,1.12l5,11c.06.14.15.26.27.35l19,16c.18.15.41.24.64.24.04,0,.08,0,.11,0,.27-.03.52-.17.69-.39l6-8c.23-.3.26-.71.09-1.05l-.75-1.51,2.53-4.21,2.65-.88c.21-.07.39-.21.52-.39l4-6c.26-.4.21-.92-.12-1.26l-1.41-1.41,6.52-9.31c.17-.24.22-.54.15-.82s-.26-.52-.52-.65l-9.01-4.5,6.4-10.06c.15-.24.19-.52.12-.79-.07-.27-.25-.5-.5-.63L30.46.61c-.15-.08-.31-.11-.46-.11h0Z"/></g><path class="cls-4" d="M14,36.5s1,2,3,1,1-2,3-2,3-2,5-2,3,1,4,0c.64-.64,1.68-1.28,2.35-1.65.29-.16.64.06.61.39-.07.89-.29,2.26-.97,2.26-1,0-1,1-3,1s-3-1-3,0-2,3-2,5-6,2-6,1-1,0-2-2-2-3-1-3Z"/><path class="cls-6" d="M40,30.5c1.66,0,3,1.34,3,3s-1.34,3-3,3-3-1.34-3-3,1.34-3,3-3M40,29.5c-2.21,0-4,1.79-4,4s1.79,4,4,4,4-1.79,4-4-1.79-4-4-4h0Z"/><path class="cls-3" d="M41.64,40.43l-2.97-13.77-17.17-10.66,17.17,10.66,3.83,2.34s4.87,3.9,2.11,6.89c-.03.03-1.69,2.23-2.57,3.4-.34.45-.58.61-.4,1.14l.86,2.57-10.96,17.19s-3.04-7.19-4.04-7.19-2-1-2-1c0,0-5-6-6-7s-2-1-3-1-4-4-4-6,3-6,3-6L30.5,7"/><line class="cls-3" x1="49.5" y1="32" x2="40.1" y2="33.45"/><g id="SVGRepo_iconCarrier"><path class="cls-5" d="M37.09,10.05c-.15-.06-.33-.03-.45.09l-.26.26-.89-.88c-.16-.16-.42-.16-.58,0l-.88.87-.28-.26c-.12-.11-.29-.14-.45-.08-.15.07-.25.21-.25.38v2.37c0,1.04.75,1.92,1.74,2.11.13.03.27.04.41.04s.28-.01.41-.04c.67-.13,1.26-.58,1.55-1.22,0,0,0,0,0,0,.13-.28.19-.58.19-.88v-2.37c0-.17-.1-.32-.25-.38Z"/><path class="cls-5" d="M35.48,9.52c-.16-.16-.42-.16-.58,0l-.88.87.3.28.92.86.22-.22.33-.33.29-.29.29-.29-.89-.88Z"/><path class="cls-14" d="M37.09,10.05c-.15-.06-.33-.03-.45.09l-.26.26-.29.29-.29.29-.33.33-.22.22.29.27s0,0,0,0h.01s.3.29.3.29l.37.34.69.64.15.14c.13.12.17.31.09.47,0,0,0,0,0,0,0,0,0,0,0,0,.13-.28.19-.58.19-.88v-2.37c0-.17-.1-.32-.25-.38Z"/><path class="cls-8" d="M37.06,13.22l-.15-.14-.69-.64-.37-.34-.3-.28h-.01s0-.01,0-.01l-.29-.27-.92-.86-.3-.28-.28-.26c-.12-.11-.29-.14-.45-.08-.15.07-.25.21-.25.38v2.37c0,1.04.75,1.92,1.74,2.11.13.03.27.04.41.04s.28-.01.41-.04c.67-.13,1.26-.58,1.55-1.22,0,0,0,0,0,0,.07-.16.03-.35-.09-.47Z"/><path class="cls-12" d="M38.33,16.48s-.65-1.07-1.74-1.07c-.39,0-.71.13-.98.3v-.8c-.13.03-.27.04-.41.04s-.28-.01-.41-.04v.8c-.26-.17-.59-.3-.98-.3-1.09,0-1.72,1.03-1.74,1.07-.09.15-.08.34.03.47.08.1.84,1.02,1.71,1.02.39,0,.71-.13.98-.3v.43c0,.23.18.41.41.41s.41-.18.41-.41v-.48c.28.19.62.35.98.35,1.09,0,1.72-1.03,1.74-1.07.08-.13.08-.29,0-.42Z"/><path class="cls-9" d="M34.78,14.91v.8c-.26-.17-.59-.3-.98-.3-1.09,0-1.72,1.03-1.74,1.07-.09.15-.08.34.03.47.08.1.84,1.02,1.71,1.02.39,0,.71-.13.98-.3v.43c0,.23.18.41.41.41v-3.57c-.14,0-.28-.01-.41-.04Z"/></g><g id="SVGRepo_iconCarrier-2"><path class="cls-5" d="M28.09,22.05c-.15-.06-.33-.03-.45.09l-.26.26-.89-.88c-.16-.16-.42-.16-.58,0l-.88.87-.28-.26c-.12-.11-.29-.14-.45-.08-.15.07-.25.21-.25.38v2.37c0,1.04.75,1.92,1.74,2.11.13.03.27.04.41.04s.28-.01.41-.04c.67-.13,1.26-.58,1.55-1.22,0,0,0,0,0,0,.13-.28.19-.58.19-.88v-2.37c0-.17-.1-.32-.25-.38Z"/><path class="cls-5" d="M26.48,21.52c-.16-.16-.42-.16-.58,0l-.88.87.3.28.92.86.22-.22.33-.33.29-.29.29-.29-.89-.88Z"/><path class="cls-14" d="M28.09,22.05c-.15-.06-.33-.03-.45.09l-.26.26-.29.29-.29.29-.33.33-.22.22.29.27s0,0,0,0h.01s.3.29.3.29l.37.34.69.64.15.14c.13.12.17.31.09.47,0,0,0,0,0,0,0,0,0,0,0,0,.13-.28.19-.58.19-.88v-2.37c0-.17-.1-.32-.25-.38Z"/><path class="cls-8" d="M28.06,25.22l-.15-.14-.69-.64-.37-.34-.3-.28h-.01s0-.01,0-.01l-.29-.27-.92-.86-.3-.28-.28-.26c-.12-.11-.29-.14-.45-.08-.15.07-.25.21-.25.38v2.37c0,1.04.75,1.92,1.74,2.11.13.03.27.04.41.04s.28-.01.41-.04c.67-.13,1.26-.58,1.55-1.22,0,0,0,0,0,0,.07-.16.03-.35-.09-.47Z"/><path class="cls-12" d="M29.33,28.48s-.65-1.07-1.74-1.07c-.39,0-.71.13-.98.3v-.8c-.13.03-.27.04-.41.04s-.28-.01-.41-.04v.8c-.26-.17-.59-.3-.98-.3-1.09,0-1.72,1.03-1.74,1.07-.09.15-.08.34.03.47.08.1.84,1.02,1.71,1.02.39,0,.71-.13.98-.3v.43c0,.23.18.41.41.41s.41-.18.41-.41v-.48c.28.19.62.35.98.35,1.09,0,1.72-1.03,1.74-1.07.08-.13.08-.29,0-.42Z"/><path class="cls-9" d="M25.78,26.91v.8c-.26-.17-.59-.3-.98-.3-1.09,0-1.72,1.03-1.74,1.07-.09.15-.08.34.03.47.08.1.84,1.02,1.71,1.02.39,0,.71-.13.98-.3v.43c0,.23.18.41.41.41v-3.57c-.14,0-.28-.01-.41-.04Z"/></g><g id="SVGRepo_iconCarrier-3"><path class="cls-5" d="M29.09,37.05c-.15-.06-.33-.03-.45.09l-.26.26-.89-.88c-.16-.16-.42-.16-.58,0l-.88.87-.28-.26c-.12-.11-.29-.14-.45-.08-.15.07-.25.21-.25.38v2.37c0,1.04.75,1.92,1.74,2.11.13.03.27.04.41.04s.28-.01.41-.04c.67-.13,1.26-.58,1.55-1.22,0,0,0,0,0,0,.13-.28.19-.58.19-.88v-2.37c0-.17-.1-.32-.25-.38Z"/><path class="cls-5" d="M27.48,36.52c-.16-.16-.42-.16-.58,0l-.88.87.3.28.92.86.22-.22.33-.33.29-.29.29-.29-.89-.88Z"/><path class="cls-14" d="M29.09,37.05c-.15-.06-.33-.03-.45.09l-.26.26-.29.29-.29.29-.33.33-.22.22.29.27s0,0,0,0h.01s.3.29.3.29l.37.34.69.64.15.14c.13.12.17.31.09.47,0,0,0,0,0,0,0,0,0,0,0,0,.13-.28.19-.58.19-.88v-2.37c0-.17-.1-.32-.25-.38Z"/><path class="cls-8" d="M29.06,40.22l-.15-.14-.69-.64-.37-.34-.3-.28h-.01s0-.01,0-.01l-.29-.27-.92-.86-.3-.28-.28-.26c-.12-.11-.29-.14-.45-.08-.15.07-.25.21-.25.38v2.37c0,1.04.75,1.92,1.74,2.11.13.03.27.04.41.04s.28-.01.41-.04c.67-.13,1.26-.58,1.55-1.22,0,0,0,0,0,0,.07-.16.03-.35-.09-.47Z"/><path class="cls-12" d="M30.33,43.48s-.65-1.07-1.74-1.07c-.39,0-.71.13-.98.3v-.8c-.13.03-.27.04-.41.04s-.28-.01-.41-.04v.8c-.26-.17-.59-.3-.98-.3-1.09,0-1.72,1.03-1.74,1.07-.09.15-.08.34.03.47.08.1.84,1.02,1.71,1.02.39,0,.71-.13.98-.3v.43c0,.23.18.41.41.41s.41-.18.41-.41v-.48c.28.19.62.35.98.35,1.09,0,1.72-1.03,1.74-1.07.08-.13.08-.29,0-.42Z"/><path class="cls-9" d="M26.78,41.91v.8c-.26-.17-.59-.3-.98-.3-1.09,0-1.72,1.03-1.74,1.07-.09.15-.08.34.03.47.08.1.84,1.02,1.71,1.02.39,0,.71-.13.98-.3v.43c0,.23.18.41.41.41v-3.57c-.14,0-.28-.01-.41-.04Z"/></g><g id="SVGRepo_iconCarrier-4"><path class="cls-5" d="M36.09,43.05c-.15-.06-.33-.03-.45.09l-.26.26-.89-.88c-.16-.16-.42-.16-.58,0l-.88.87-.28-.26c-.12-.11-.29-.14-.45-.08-.15.07-.25.21-.25.38v2.37c0,1.04.75,1.92,1.74,2.11.13.03.27.04.41.04s.28-.01.41-.04c.67-.13,1.26-.58,1.55-1.22,0,0,0,0,0,0,.13-.28.19-.58.19-.88v-2.37c0-.17-.1-.32-.25-.38Z"/><path class="cls-5" d="M34.48,42.52c-.16-.16-.42-.16-.58,0l-.88.87.3.28.92.86.22-.22.33-.33.29-.29.29-.29-.89-.88Z"/><path class="cls-14" d="M36.09,43.05c-.15-.06-.33-.03-.45.09l-.26.26-.29.29-.29.29-.33.33-.22.22.29.27s0,0,0,0h.01s.3.29.3.29l.37.34.69.64.15.14c.13.12.17.31.09.47,0,0,0,0,0,0,0,0,0,0,0,0,.13-.28.19-.58.19-.88v-2.37c0-.17-.1-.32-.25-.38Z"/><path class="cls-8" d="M36.06,46.22l-.15-.14-.69-.64-.37-.34-.3-.28h-.01s0-.01,0-.01l-.29-.27-.92-.86-.3-.28-.28-.26c-.12-.11-.29-.14-.45-.08-.15.07-.25.21-.25.38v2.37c0,1.04.75,1.92,1.74,2.11.13.03.27.04.41.04s.28-.01.41-.04c.67-.13,1.26-.58,1.55-1.22,0,0,0,0,0,0,.07-.16.03-.35-.09-.47Z"/><path class="cls-12" d="M37.33,49.48s-.65-1.07-1.74-1.07c-.39,0-.71.13-.98.3v-.8c-.13.03-.27.04-.41.04s-.28-.01-.41-.04v.8c-.26-.17-.59-.3-.98-.3-1.09,0-1.72,1.03-1.74,1.07-.09.15-.08.34.03.47.08.1.84,1.02,1.71,1.02.39,0,.71-.13.98-.3v.43c0,.23.18.41.41.41s.41-.18.41-.41v-.48c.28.19.62.35.98.35,1.09,0,1.72-1.03,1.74-1.07.08-.13.08-.29,0-.42Z"/><path class="cls-9" d="M33.78,47.91v.8c-.26-.17-.59-.3-.98-.3-1.09,0-1.72,1.03-1.74,1.07-.09.15-.08.34.03.47.08.1.84,1.02,1.71,1.02.39,0,.71-.13.98-.3v.43c0,.23.18.41.41.41v-3.57c-.14,0-.28-.01-.41-.04Z"/></g></g><g class="cls-7"><g class="cls-13"><g class="cls-16"><path class="cls-2" d="M34,63c-.12,0-.23-.04-.32-.12l-19-16c-.06-.05-.1-.11-.13-.18l-5-11c-.09-.19-.05-.41.1-.56l3-3,1.85-2.8v-2.85c0-.09.02-.18.07-.26L29.57,1.24c.09-.16.26-.24.43-.24.08,0,.16.02.23.06l21,11c.12.06.21.18.25.31s.01.28-.06.4l-6.7,10.53,9.5,4.75c.13.06.23.18.26.32.04.14,0,.29-.08.41l-6.76,9.66,1.7,1.7c.17.17.19.43.06.63l-4,6c-.06.09-.15.16-.26.2l-2.82.94-2.76,4.61.88,1.75c.08.17.07.37-.05.52l-6,8c-.08.11-.21.18-.34.2-.02,0-.04,0-.06,0Z"/><path class="cls-15" d="M30,1.5l21,11-7,11,10,5-7,10,2,2-4,6-3,1-3,5,1,2-6,8-19-16-5-11,3-3,2-3v-3L30,1.5M30,.5c-.34,0-.67.17-.86.49l-15,25c-.09.16-.14.33-.14.51v2.7l-1.78,2.67-2.93,2.93c-.29.29-.38.74-.2,1.12l5,11c.06.14.15.26.27.35l19,16c.18.15.41.24.64.24.04,0,.08,0,.11,0,.27-.03.52-.17.69-.39l6-8c.23-.3.26-.71.09-1.05l-.75-1.51,2.53-4.21,2.65-.88c.21-.07.39-.21.52-.39l4-6c.26-.4.21-.92-.12-1.26l-1.41-1.41,6.52-9.31c.17-.24.22-.54.15-.82s-.26-.52-.52-.65l-9.01-4.5,6.4-10.06c.15-.24.19-.52.12-.79-.07-.27-.25-.5-.5-.63L30.46.61c-.15-.08-.31-.11-.46-.11h0Z"/></g><path class="cls-2" d="M14,36.5s1,2,3,1,1-2,3-2,3-2,5-2,3,1,4,0c.64-.64,1.68-1.28,2.35-1.65.29-.16.64.06.61.39-.07.89-.29,2.26-.97,2.26-1,0-1,1-3,1s-3-1-3,0-2,3-2,5-6,2-6,1-1,0-2-2-2-3-1-3Z"/><circle class="cls-2" cx="40" cy="33.5" r="3.5"/><path class="cls-6" d="M40,30.5c1.66,0,3,1.34,3,3s-1.34,3-3,3-3-1.34-3-3,1.34-3,3-3M40,29.5c-2.21,0-4,1.79-4,4s1.79,4,4,4,4-1.79,4-4-1.79-4-4-4h0Z"/><path class="cls-1" d="M41.64,40.43l-2.97-13.77-17.17-10.66,17.17,10.66,3.83,2.34s4.87,3.9,2.11,6.89c-.03.03-1.69,2.23-2.57,3.4-.34.45-.58.61-.4,1.14l.86,2.57-10.96,17.19s-3.04-7.19-4.04-7.19-2-1-2-1c0,0-5-6-6-7s-2-1-3-1-4-4-4-6,3-6,3-6L30.5,7"/><line class="cls-1" x1="49.5" y1="32" x2="40.1" y2="33.45"/><g id="SVGRepo_iconCarrier-5"><path class="cls-2" d="M37.09,10.05c-.15-.06-.33-.03-.45.09l-.26.26-.89-.88c-.16-.16-.42-.16-.58,0l-.88.87-.28-.26c-.12-.11-.29-.14-.45-.08-.15.07-.25.21-.25.38v2.37c0,1.04.75,1.92,1.74,2.11.13.03.27.04.41.04s.28-.01.41-.04c.67-.13,1.26-.58,1.55-1.22,0,0,0,0,0,0,.13-.28.19-.58.19-.88v-2.37c0-.17-.1-.32-.25-.38Z"/><path class="cls-2" d="M35.48,9.52c-.16-.16-.42-.16-.58,0l-.88.87.3.28.92.86.22-.22.33-.33.29-.29.29-.29-.89-.88Z"/><path class="cls-2" d="M37.09,10.05c-.15-.06-.33-.03-.45.09l-.26.26-.29.29-.29.29-.33.33-.22.22.29.27s0,0,0,0h.01s.3.29.3.29l.37.34.69.64.15.14c.13.12.17.31.09.47,0,0,0,0,0,0,0,0,0,0,0,0,.13-.28.19-.58.19-.88v-2.37c0-.17-.1-.32-.25-.38Z"/><path class="cls-2" d="M37.06,13.22l-.15-.14-.69-.64-.37-.34-.3-.28h-.01s0-.01,0-.01l-.29-.27-.92-.86-.3-.28-.28-.26c-.12-.11-.29-.14-.45-.08-.15.07-.25.21-.25.38v2.37c0,1.04.75,1.92,1.74,2.11.13.03.27.04.41.04s.28-.01.41-.04c.67-.13,1.26-.58,1.55-1.22,0,0,0,0,0,0,.07-.16.03-.35-.09-.47Z"/><path class="cls-2" d="M38.33,16.48s-.65-1.07-1.74-1.07c-.39,0-.71.13-.98.3v-.8c-.13.03-.27.04-.41.04s-.28-.01-.41-.04v.8c-.26-.17-.59-.3-.98-.3-1.09,0-1.72,1.03-1.74,1.07-.09.15-.08.34.03.47.08.1.84,1.02,1.71,1.02.39,0,.71-.13.98-.3v.43c0,.23.18.41.41.41s.41-.18.41-.41v-.48c.28.19.62.35.98.35,1.09,0,1.72-1.03,1.74-1.07.08-.13.08-.29,0-.42Z"/><path class="cls-2" d="M34.78,14.91v.8c-.26-.17-.59-.3-.98-.3-1.09,0-1.72,1.03-1.74,1.07-.09.15-.08.34.03.47.08.1.84,1.02,1.71,1.02.39,0,.71-.13.98-.3v.43c0,.23.18.41.41.41v-3.57c-.14,0-.28-.01-.41-.04Z"/></g><g id="SVGRepo_iconCarrier-6"><path class="cls-2" d="M28.09,22.05c-.15-.06-.33-.03-.45.09l-.26.26-.89-.88c-.16-.16-.42-.16-.58,0l-.88.87-.28-.26c-.12-.11-.29-.14-.45-.08-.15.07-.25.21-.25.38v2.37c0,1.04.75,1.92,1.74,2.11.13.03.27.04.41.04s.28-.01.41-.04c.67-.13,1.26-.58,1.55-1.22,0,0,0,0,0,0,.13-.28.19-.58.19-.88v-2.37c0-.17-.1-.32-.25-.38Z"/><path class="cls-2" d="M26.48,21.52c-.16-.16-.42-.16-.58,0l-.88.87.3.28.92.86.22-.22.33-.33.29-.29.29-.29-.89-.88Z"/><path class="cls-2" d="M28.09,22.05c-.15-.06-.33-.03-.45.09l-.26.26-.29.29-.29.29-.33.33-.22.22.29.27s0,0,0,0h.01s.3.29.3.29l.37.34.69.64.15.14c.13.12.17.31.09.47,0,0,0,0,0,0,0,0,0,0,0,0,.13-.28.19-.58.19-.88v-2.37c0-.17-.1-.32-.25-.38Z"/><path class="cls-2" d="M28.06,25.22l-.15-.14-.69-.64-.37-.34-.3-.28h-.01s0-.01,0-.01l-.29-.27-.92-.86-.3-.28-.28-.26c-.12-.11-.29-.14-.45-.08-.15.07-.25.21-.25.38v2.37c0,1.04.75,1.92,1.74,2.11.13.03.27.04.41.04s.28-.01.41-.04c.67-.13,1.26-.58,1.55-1.22,0,0,0,0,0,0,.07-.16.03-.35-.09-.47Z"/><path class="cls-2" d="M29.33,28.48s-.65-1.07-1.74-1.07c-.39,0-.71.13-.98.3v-.8c-.13.03-.27.04-.41.04s-.28-.01-.41-.04v.8c-.26-.17-.59-.3-.98-.3-1.09,0-1.72,1.03-1.74,1.07-.09.15-.08.34.03.47.08.1.84,1.02,1.71,1.02.39,0,.71-.13.98-.3v.43c0,.23.18.41.41.41s.41-.18.41-.41v-.48c.28.19.62.35.98.35,1.09,0,1.72-1.03,1.74-1.07.08-.13.08-.29,0-.42Z"/><path class="cls-2" d="M25.78,26.91v.8c-.26-.17-.59-.3-.98-.3-1.09,0-1.72,1.03-1.74,1.07-.09.15-.08.34.03.47.08.1.84,1.02,1.71,1.02.39,0,.71-.13.98-.3v.43c0,.23.18.41.41.41v-3.57c-.14,0-.28-.01-.41-.04Z"/></g><g id="SVGRepo_iconCarrier-7"><path class="cls-2" d="M29.09,37.05c-.15-.06-.33-.03-.45.09l-.26.26-.89-.88c-.16-.16-.42-.16-.58,0l-.88.87-.28-.26c-.12-.11-.29-.14-.45-.08-.15.07-.25.21-.25.38v2.37c0,1.04.75,1.92,1.74,2.11.13.03.27.04.41.04s.28-.01.41-.04c.67-.13,1.26-.58,1.55-1.22,0,0,0,0,0,0,.13-.28.19-.58.19-.88v-2.37c0-.17-.1-.32-.25-.38Z"/><path class="cls-2" d="M27.48,36.52c-.16-.16-.42-.16-.58,0l-.88.87.3.28.92.86.22-.22.33-.33.29-.29.29-.29-.89-.88Z"/><path class="cls-2" d="M29.09,37.05c-.15-.06-.33-.03-.45.09l-.26.26-.29.29-.29.29-.33.33-.22.22.29.27s0,0,0,0h.01s.3.29.3.29l.37.34.69.64.15.14c.13.12.17.31.09.47,0,0,0,0,0,0,0,0,0,0,0,0,.13-.28.19-.58.19-.88v-2.37c0-.17-.1-.32-.25-.38Z"/><path class="cls-2" d="M29.06,40.22l-.15-.14-.69-.64-.37-.34-.3-.28h-.01s0-.01,0-.01l-.29-.27-.92-.86-.3-.28-.28-.26c-.12-.11-.29-.14-.45-.08-.15.07-.25.21-.25.38v2.37c0,1.04.75,1.92,1.74,2.11.13.03.27.04.41.04s.28-.01.41-.04c.67-.13,1.26-.58,1.55-1.22,0,0,0,0,0,0,.07-.16.03-.35-.09-.47Z"/><path class="cls-2" d="M30.33,43.48s-.65-1.07-1.74-1.07c-.39,0-.71.13-.98.3v-.8c-.13.03-.27.04-.41.04s-.28-.01-.41-.04v.8c-.26-.17-.59-.3-.98-.3-1.09,0-1.72,1.03-1.74,1.07-.09.15-.08.34.03.47.08.1.84,1.02,1.71,1.02.39,0,.71-.13.98-.3v.43c0,.23.18.41.41.41s.41-.18.41-.41v-.48c.28.19.62.35.98.35,1.09,0,1.72-1.03,1.74-1.07.08-.13.08-.29,0-.42Z"/><path class="cls-2" d="M26.78,41.91v.8c-.26-.17-.59-.3-.98-.3-1.09,0-1.72,1.03-1.74,1.07-.09.15-.08.34.03.47.08.1.84,1.02,1.71,1.02.39,0,.71-.13.98-.3v.43c0,.23.18.41.41.41v-3.57c-.14,0-.28-.01-.41-.04Z"/></g><g id="SVGRepo_iconCarrier-8"><path class="cls-2" d="M36.09,43.05c-.15-.06-.33-.03-.45.09l-.26.26-.89-.88c-.16-.16-.42-.16-.58,0l-.88.87-.28-.26c-.12-.11-.29-.14-.45-.08-.15.07-.25.21-.25.38v2.37c0,1.04.75,1.92,1.74,2.11.13.03.27.04.41.04s.28-.01.41-.04c.67-.13,1.26-.58,1.55-1.22,0,0,0,0,0,0,.13-.28.19-.58.19-.88v-2.37c0-.17-.1-.32-.25-.38Z"/><path class="cls-2" d="M34.48,42.52c-.16-.16-.42-.16-.58,0l-.88.87.3.28.92.86.22-.22.33-.33.29-.29.29-.29-.89-.88Z"/><path class="cls-2" d="M36.09,43.05c-.15-.06-.33-.03-.45.09l-.26.26-.29.29-.29.29-.33.33-.22.22.29.27s0,0,0,0h.01s.3.29.3.29l.37.34.69.64.15.14c.13.12.17.31.09.47,0,0,0,0,0,0,0,0,0,0,0,0,.13-.28.19-.58.19-.88v-2.37c0-.17-.1-.32-.25-.38Z"/><path class="cls-2" d="M36.06,46.22l-.15-.14-.69-.64-.37-.34-.3-.28h-.01s0-.01,0-.01l-.29-.27-.92-.86-.3-.28-.28-.26c-.12-.11-.29-.14-.45-.08-.15.07-.25.21-.25.38v2.37c0,1.04.75,1.92,1.74,2.11.13.03.27.04.41.04s.28-.01.41-.04c.67-.13,1.26-.58,1.55-1.22,0,0,0,0,0,0,.07-.16.03-.35-.09-.47Z"/><path class="cls-2" d="M37.33,49.48s-.65-1.07-1.74-1.07c-.39,0-.71.13-.98.3v-.8c-.13.03-.27.04-.41.04s-.28-.01-.41-.04v.8c-.26-.17-.59-.3-.98-.3-1.09,0-1.72,1.03-1.74,1.07-.09.15-.08.34.03.47.08.1.84,1.02,1.71,1.02.39,0,.71-.13.98-.3v.43c0,.23.18.41.41.41s.41-.18.41-.41v-.48c.28.19.62.35.98.35,1.09,0,1.72-1.03,1.74-1.07.08-.13.08-.29,0-.42Z"/><path class="cls-2" d="M54.97,28.25c-.07-.28-.26-.52-.52-.65l-9.01-4.5,6.41-10.06c.15-.24.19-.52.12-.79s-.25-.5-.5-.63L30.46.61c-.15-.08-.31-.11-.46-.11-.34,0-.67.17-.86.49l-15,25c-.09.16-.14.33-.14.51v2.7l-1.78,2.67-2.93,2.93c-.29.29-.38.74-.2,1.12l5,11c.06.13.15.25.27.35l19,16c.18.15.41.24.64.24.04,0,.08,0,.11,0,.27-.03.52-.17.69-.39l6-8c.23-.3.26-.71.09-1.05l-.75-1.51,2.53-4.21,2.65-.88c.21-.07.39-.21.52-.39l4-6c.26-.4.21-.92-.12-1.26l-1.41-1.41,6.52-9.31c.17-.24.22-.54.15-.82Z"/><path class="cls-2" d="M33.78,47.91v.8c-.26-.17-.59-.3-.98-.3-1.09,0-1.72,1.03-1.74,1.07-.09.15-.08.34.03.47.08.1.84,1.02,1.71,1.02.39,0,.71-.13.98-.3v.43c0,.23.18.41.41.41v-3.57c-.14,0-.28-.01-.41-.04Z"/></g></g></g></g></g></svg>\n  '''\n    \n    fig = pn.pane.HTML(SVG*(full))\n    fig2 = pn.pane.HTML(partialSVG)\n    \n    composite = pn.Column(fig)\n    \n    return composite\n\n\ndef generate_pipes_SVG(origin, destination, n):\n    SVG = '''<?xml version="1.0" encoding="UTF-8"?><svg id="Pipeline_1" height="45px" width="45px" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 35 35"><defs><style>.cls-1{fill:#41537b;}.cls-2{fill:#a2aea7;}.cls-3{fill:#bdcbc3;}.cls-4{fill:#d9cdf1;}.cls-5{fill:#3b5b6e;}.cls-6{fill:#4c6fb0;}.cls-7{fill:#374766;}.cls-8{fill:#4d83b1;}.cls-9{fill:#2c535f;}.cls-10{fill:#3a6284;}.cls-11{fill:#3f6697;}.cls-12{fill:#3c6585;}</style></defs><path class="cls-12" d="M34.35,12.01c0-2.53-1.77-5.6-3.92-6.83-1.11-.64-2.12-.67-2.84-.21h0l-.68.44h.2c-.38.48-.61,1.18-.61,2.07,0,2.49,1.77,5.57,3.92,6.83.79.46,1.52.61,2.14.5l-.11.23.67-.43h0c.75-.4,1.22-1.3,1.22-2.61Z"/><path class="cls-5" d="M33.5,12.55c0-2.53-1.77-5.6-3.92-6.83-2.16-1.23-3.92-.2-3.92,2.3s1.77,5.57,3.92,6.83c2.16,1.26,3.92.23,3.92-2.3Z"/><path class="cls-9" d="M30.75,7.98c-.36-.4-.75-.73-1.17-.97-1.55-.88-2.81-.14-2.81,1.64,0,1.68,1.11,3.72,2.53,4.71.09.07.19.13.28.18,1.55.9,2.81.16,2.81-1.64,0-1.32-.68-2.85-1.64-3.93Z"/><path class="cls-12" d="M33.54,12.53c0-2.53-1.77-5.6-3.92-6.83-1.11-.64-2.12-.67-2.84-.21h0l-.68.44h.2c-.38.48-.61,1.18-.61,2.07,0,2.49,1.77,5.57,3.92,6.83.79.46,1.52.61,2.14.5l-.11.23.67-.43h0c.75-.4,1.22-1.3,1.22-2.61Z"/><path class="cls-5" d="M32.69,13.06c0-2.53-1.77-5.6-3.92-6.83-2.16-1.23-3.92-.2-3.92,2.3s1.77,5.57,3.92,6.83c2.16,1.26,3.92.23,3.92-2.3Z"/><path class="cls-9" d="M29.94,8.5c-.36-.4-.75-.73-1.17-.97-1.55-.88-2.81-.14-2.81,1.64,0,1.68,1.11,3.72,2.53,4.71.09.07.19.13.28.18,1.55.9,2.81.16,2.81-1.64,0-1.32-.68-2.85-1.64-3.93Z"/><path class="cls-12" d="M32.75,13.04c0-2.53-1.77-5.6-3.92-6.83-1.11-.64-2.12-.67-2.84-.21h0l-.68.44h.2c-.38.48-.61,1.18-.61,2.07,0,2.49,1.77,5.57,3.92,6.83.79.46,1.52.61,2.14.5l-.11.23.67-.43h0c.75-.4,1.22-1.3,1.22-2.61Z"/><path class="cls-5" d="M31.9,13.57c0-2.53-1.77-5.6-3.92-6.83-2.16-1.23-3.92-.2-3.92,2.3s1.77,5.57,3.92,6.83c2.16,1.26,3.92.23,3.92-2.3Z"/><path class="cls-9" d="M29.15,9c-.36-.4-.75-.73-1.17-.97-1.55-.88-2.81-.14-2.81,1.64,0,1.68,1.11,3.72,2.53,4.71.09.07.19.13.28.18,1.55.9,2.81.16,2.81-1.64,0-1.32-.68-2.85-1.64-3.93Z"/><path class="cls-11" d="M25.15,9.94l-.83-.89,1.49-.89c.06-.04.11-.08.17-.11h.01s0,0,0,0c.49-.26,1.15-.21,1.87.2,1.49.85,2.71,2.98,2.71,4.72,0,.76-.23,1.32-.61,1.65h0s0,0,0,0c-.1.08-.21.15-.32.2l-1.5.92-.8-1.55c-1.21-.99-2.14-2.75-2.18-4.25Z"/><path class="cls-10" d="M28.92,13.96c0-1.75-1.22-3.87-2.71-4.72-1.49-.85-2.71-.14-2.71,1.59s1.22,3.85,2.71,4.72c1.49.87,2.71.16,2.71-1.59Z"/><path class="cls-2" d="M28.06,13.47c0-1.19-.83-2.64-1.85-3.22-1.02-.58-1.85-.09-1.85,1.08s.83,2.63,1.85,3.22c1.02.6,1.85.11,1.85-1.08Z"/><path class="cls-4" d="M26.25,14.1c0-.91-.63-2.01-1.41-2.45-.77-.44-1.41-.07-1.41.82s.63,2,1.41,2.45c.77.45,1.41.08,1.41-.82Z"/><path class="cls-4" d="M25.12,14.8c0-.91-.63-2.01-1.41-2.45-.77-.44-1.41-.07-1.41.82s.63,2,1.41,2.45c.77.45,1.41.08,1.41-.82Z"/><path class="cls-4" d="M24.12,15.43c0-.91-.63-2.01-1.41-2.45-.77-.44-1.41-.07-1.41.82s.63,2,1.41,2.45c.77.45,1.41.08,1.41-.82Z"/><path class="cls-1" d="M23.65,16.51c0-1.33-.93-2.94-2.06-3.59-1.13-.65-2.06-.1-2.06,1.21s.93,2.93,2.06,3.59c1.13.66,2.06.12,2.06-1.21Z"/><path class="cls-7" d="M22.99,16.13c0-.91-.63-2.01-1.41-2.45-.77-.44-1.41-.07-1.41.82s.63,2,1.41,2.45c.77.45,1.41.08,1.41-.82Z"/><path class="cls-4" d="M22.1,16.66c0-.91-.63-2.01-1.41-2.45-.77-.44-1.41-.07-1.41.82s.63,2,1.41,2.45c.77.45,1.41.08,1.41-.82Z"/><path class="cls-4" d="M20.97,17.36c0-.91-.63-2.01-1.41-2.45-.77-.44-1.41-.07-1.41.82s.63,2,1.41,2.45c.77.45,1.41.08,1.41-.82Z"/><path class="cls-4" d="M19.97,18c0-.91-.63-2.01-1.41-2.45-.77-.44-1.41-.07-1.41.82s.63,2,1.41,2.45c.77.45,1.41.08,1.41-.82Z"/><path class="cls-1" d="M19.5,19.07c0-1.33-.93-2.94-2.06-3.59-1.13-.65-2.06-.1-2.06,1.21s.93,2.93,2.06,3.59c1.13.66,2.06.12,2.06-1.21Z"/><path class="cls-7" d="M18.84,18.7c0-.91-.63-2.01-1.41-2.45-.77-.44-1.41-.07-1.41.82s.63,2,1.41,2.45c.77.45,1.41.08,1.41-.82Z"/><path class="cls-4" d="M18.02,19.2c0-.91-.63-2.01-1.41-2.45-.77-.44-1.41-.07-1.41.82s.63,2,1.41,2.45c.77.45,1.41.08,1.41-.82Z"/><path class="cls-4" d="M16.89,19.9c0-.91-.63-2.01-1.41-2.45-.77-.44-1.41-.07-1.41.82s.63,2,1.41,2.45c.77.45,1.41.08,1.41-.82Z"/><path class="cls-4" d="M15.9,20.53c0-.91-.63-2.01-1.41-2.45-.77-.44-1.41-.07-1.41.82s.63,2,1.41,2.45c.77.45,1.41.08,1.41-.82Z"/><path class="cls-1" d="M15.42,21.61c0-1.33-.93-2.94-2.06-3.59-1.13-.65-2.06-.1-2.06,1.21s.93,2.93,2.06,3.59c1.13.66,2.06.12,2.06-1.21Z"/><path class="cls-7" d="M14.77,21.23c0-.91-.63-2.01-1.41-2.45-.77-.44-1.41-.07-1.41.82s.63,2,1.41,2.45c.77.45,1.41.08,1.41-.82Z"/><path class="cls-4" d="M13.87,21.76c0-.91-.63-2.01-1.41-2.45-.77-.44-1.41-.07-1.41.82s.63,2,1.41,2.45c.77.45,1.41.08,1.41-.82Z"/><path class="cls-4" d="M12.74,22.46c0-.91-.63-2.01-1.41-2.45-.77-.44-1.41-.07-1.41.82s.63,2,1.41,2.45c.77.45,1.41.08,1.41-.82Z"/><path class="cls-4" d="M11.75,23.1c0-.91-.63-2.01-1.41-2.45-.77-.44-1.41-.07-1.41.82s.63,2,1.41,2.45c.77.45,1.41.08,1.41-.82Z"/><path class="cls-6" d="M28.16,13.72c0-1.33-.93-2.94-2.06-3.59-.16-.09-.31-.15-.45-.2h0c-.56-.22-1.04.05-1.04.05l-13.3,8.27-.27.16h0s-.09.05-.13.08l-.52.32-.49.29h0c-.06.03-.11.07-.16.11l-1.97,1.22.51.54s0,.07,0,.11c0,1.25.85,2.79,1.92,3.5l.48.93,1.14-.7c.09-.04.17-.09.25-.15h0s0,0,0,0c0,0,0,0,.01,0l.87-.54c.09-.04.17-.09.25-.15h0s0,0,0,0c0,0,0,0,0,0l2.8-1.72c.07-.03.13-.07.19-.12l.95-.58c.06-.03.12-.07.18-.11l10.25-6.31s.31-.19.4-.47h0c.13-.24.21-.55.21-.93Z"/><path class="cls-3" d="M11.27,24.17c0-1.33-.93-2.94-2.06-3.59-1.13-.65-2.06-.1-2.06,1.21s.93,2.93,2.06,3.59c1.13.66,2.06.12,2.06-1.21Z"/><path class="cls-2" d="M10.61,23.79c0-.91-.63-2.01-1.41-2.45-.77-.44-1.41-.07-1.41.82s.63,2,1.41,2.45c.77.45,1.41.08,1.41-.82Z"/><path class="cls-11" d="M5.95,20.81l-1-1.07,1.79-1.07c.07-.05.14-.1.21-.14h.01s0,0,0,0c.59-.31,1.38-.26,2.24.24,1.79,1.02,3.26,3.58,3.26,5.68,0,.91-.28,1.59-.74,1.98h0s0,0,0,0c-.12.1-.25.18-.39.24l-1.8,1.11-.96-1.86c-1.46-1.19-2.57-3.31-2.62-5.1Z"/><path class="cls-8" d="M10.48,25.65c0-2.1-1.47-4.65-3.26-5.68-1.79-1.02-3.26-.17-3.26,1.91s1.47,4.63,3.26,5.68c1.79,1.05,3.26.19,3.26-1.91Z"/><path class="cls-12" d="M10.95,25.94c0-2.53-1.77-5.6-3.92-6.83-1.11-.64-2.12-.67-2.84-.21h0l-.68.44h.2c-.38.48-.61,1.18-.61,2.07,0,2.49,1.77,5.57,3.92,6.83.79.46,1.52.61,2.14.5l-.11.23.67-.43h0c.75-.4,1.22-1.3,1.22-2.61Z"/><path class="cls-5" d="M10.1,26.48c0-2.53-1.77-5.6-3.92-6.83-2.16-1.23-3.92-.2-3.92,2.3s1.77,5.57,3.92,6.83c2.16,1.26,3.92.23,3.92-2.3Z"/><path class="cls-9" d="M7.35,21.91c-.36-.4-.75-.73-1.17-.97-1.55-.88-2.81-.14-2.81,1.64,0,1.68,1.11,3.72,2.53,4.71.09.07.19.13.28.18,1.55.9,2.81.16,2.81-1.64,0-1.32-.68-2.85-1.64-3.93Z"/><path class="cls-12" d="M10.14,26.46c0-2.53-1.77-5.6-3.92-6.83-1.11-.64-2.12-.67-2.84-.21h0l-.68.44h.2c-.38.48-.61,1.18-.61,2.07,0,2.49,1.77,5.57,3.92,6.83.79.46,1.52.61,2.14.5l-.11.23.67-.43h0c.75-.4,1.22-1.3,1.22-2.61Z"/><path class="cls-5" d="M9.29,26.99c0-2.53-1.77-5.6-3.92-6.83-2.16-1.23-3.92-.2-3.92,2.3s1.77,5.57,3.92,6.83c2.16,1.26,3.92.23,3.92-2.3Z"/><path class="cls-9" d="M6.54,22.42c-.36-.4-.75-.73-1.17-.97-1.55-.88-2.81-.14-2.81,1.64,0,1.68,1.11,3.72,2.53,4.71.09.07.19.13.28.18,1.55.9,2.81.16,2.81-1.64,0-1.32-.68-2.85-1.64-3.93Z"/><path class="cls-12" d="M9.35,26.97c0-2.53-1.77-5.6-3.92-6.83-1.11-.64-2.12-.67-2.84-.21h0l-.68.44h.2c-.38.48-.61,1.18-.61,2.07,0,2.49,1.77,5.57,3.92,6.83.79.46,1.52.61,2.14.5l-.11.23.67-.43h0c.75-.4,1.22-1.3,1.22-2.61Z"/><path class="cls-5" d="M8.5,27.5c0-2.53-1.77-5.6-3.92-6.83-2.16-1.23-3.92-.2-3.92,2.3s1.77,5.57,3.92,6.83c2.16,1.26,3.92.23,3.92-2.3Z"/><path class="cls-9" d="M5.75,22.93c-.36-.4-.75-.73-1.17-.97-1.55-.88-2.81-.14-2.81,1.64,0,1.68,1.11,3.72,2.53,4.71.09.07.19.13.28.18,1.55.9,2.81.16,2.81-1.64,0-1.32-.68-2.85-1.64-3.93Z"/></svg>'''\n    fig =pn.pane.HTML(SVG*n)\n    OD = pn.pane.HTML(f'<p style="color:#3850A0; font-size:14px; margin:4px;">Pipes from <b>{origin} to {destination}</b>:  ')\n    pane = pn.Row(OD, fig)\n    return pane\n\ndef calculate_total_CO2_cost():\n    """\n    Calculate the total CO2 emission cost.\n\n    Returns:\n        float: Total CO2 emission cost in EUR/yr.\n    """\n    active_wells = active_wells_df[active_wells_df["Active"] == True]\n    active_wells["CO2_Cost"] = active_wells_df["Value"] * active_wells_df["CO2_m3"]\n    total_environmental_cost = active_wells["CO2_Cost"].sum()\n    return total_environmental_cost\n\ndef calculate_total_Drought_cost():\n    """\n    Calculate the total cost due to drought damage.\n\n    Returns:\n        float: Total drought damage cost in EUR/yr.\n    """\n    active_wells = active_wells_df[active_wells_df["Active"] == True]\n    active_wells["Drought_Cost"] = (\n        active_wells_df["Value"] * active_wells_df["Drought_m3"]\n    )\n    total_environmental_cost = active_wells["Drought_Cost"].sum()\n    return total_environmental_cost\n\ndef update_df_display():\n    """\n    Update the DataFrame display.\n\n    Returns:\n        str: The updated DataFrame as a string.\n    """\n    return f"\`\`\`python\\n{active_wells_df}\\n\`\`\`"\n\ndef toggle_well(event, well_name):\n    """\n    Toggle the active state of a well based on a checkbox.\n\n    Args:\n        event: The event object.\n        well_name (str): The name of the well.\n    """\n    active_wells_df.loc[active_wells_df["Name"] == well_name, "Active"] = event.new\n    update_indicators()\n    #map_pane.object = update_layers()\n    \ndef toggle_industrial(event, location):\n    """\n    Toggle the active state of a well based on a checkbox.\n\n    Args:\n        event: The event object.\n        well_name (str): The name of the well.\n    """\n    industrial.loc[industrial["Location"] == location, "Active"] = event.new\n    update_indicators()\n    #map_pane.object = update_layers()\n\ndef update_slider(event, well_name):\n    """\n    Update the slider value for a well.\n\n    Args:\n        event: The event object.\n        well_name (str): The name of the well.\n    """\n    active_wells_df.loc[active_wells_df["Name"] == well_name, "Value"] = event.new\n    opex_m3 = active_wells_df.loc[active_wells_df["Name"] == well_name, "OPEX_m3"]\n    active_wells_df.loc[active_wells_df["Name"] == well_name, "OPEX"] = (\n        event.new * opex_m3 * 1e6\n    )\n    env_m3 = active_wells_df.loc[active_wells_df["Name"] == well_name, "Env_m3"]\n    active_wells_df.loc[active_wells_df["Name"] == well_name, "envCost"] = (\n        event.new * env_m3 * 1e6\n    )\n    update_indicators()\n\ndef update_radio(event, well_name):\n    """\n    Update the extraction value based on the selected radio button option.\n\n    Args:\n        event: The event object.\n        well_name (str): The name of the well.\n    """\n    current_value = wells.loc[wells["Name"] == well_name, "Extraction_2023__Mm3_per_jr_"].values[0]\n    max_value = wells.loc[wells["Name"] == well_name, "Permit__Mm3_per_jr_"].values[0]\n    # agreement = wells.loc[wells["Name"]== well_name, "Agreement__Mm3_per_jr_"].values[0]\n    \n    if event.new == "-20% van Huidige":\n        new_value = current_value * 0.8\n    elif event.new == "-15% van Huidige":\n        new_value = current_value * 0.85\n    elif event.new == "Huidige":\n        new_value = current_value\n    elif event.new == "85% van Max. Vergunning":\n        new_value = max_value * 0.85\n    elif event.new == "115% van Max. Vergunning":\n        new_value = max_value * 1.15\n    elif event.new == "Maximale Vergunning":\n        new_value = max_value\n\n    pn.state.notifications.position = 'bottom-left'\n\n    if new_value > max_value:\n     pn.state.notifications.error(f"Waarschuwing bij {well_name} put: Deze waarde ligt boven de extractievergunning. Gebruik van deze waarde vereist onderhandelingen voor een grotere waterextractievergunning.", 4000)\n\n    \n    active_wells_df.loc[active_wells_df["Name"] == well_name, "Value"] = new_value\n    opex_m3 = active_wells_df.loc[active_wells_df["Name"] == well_name, "OPEX_m3"]\n    active_wells_df.loc[active_wells_df["Name"] == well_name, "OPEX"] = new_value * opex_m3\n    \n    name_pane = active_wells[well_name]["name_pane"]\n    name_pane.object = update_well_Value_formatted(well_name)\n    update_indicators()\n\ndef update_allRadio(event):\n    """\n    Update all individual radio buttons to match the master selection.\n    \n    Args:\n        event: The event object from the master radio button group.\n    """\n    # Get the selected value from the master radio button group\n    selected_value = event.new\n    \n    # Update all individual radio groups with the selected value\n    for well_data in active_wells.values():\n        well_data["radio_group"].value = selected_value\n\n    \ndef update_scenarios(event):\n    if event.new == "Bevolking 2035":\n        Scenario1()\n        print('scenario 1 actief')\n    if event.new == "Bevolking 2035 +1% toename":\n        print('scenario 2 actief')\n        Scenario2()\n    if event.new == "Bevolking - 2022":\n        print("Origineel Scenario")\n        ScenarioBase()\n    update_indicators()\n    \ndef update_scenariosSmall(event):\n    if event.new == "Kleine Bedrijven   +10% Vraag":\n        ScenarioSmallBusiness1()\n        print('scenario 1 klein actief')\n    if event.new == "Kleine Bedrijven   +35% Vraag":\n        print('scenario 2 klein actief')\n        ScenarioSmallBusiness2()\n    if event.new == "Status - 2022":\n        print("Origineel Scenario")\n        ScenarioSmallBusinessBase()\n    update_indicators()\n\n\ndef update_well_Value(well_name):\n    """\n    Update the well name display.\n\n    Args:\n        well_name (str): The name of the well.\n\n    Returns:\n        str: Updated well name display.\n    """\n    current_extraction = active_wells_df[active_wells_df["Name"]==well_name]["Value"].values[0]\n    \n    return current_extraction\n\ndef update_well_Value_formatted(well_name):\n    """\n    Update the well name display.\n\n    Args:\n        well_name (str): The name of the well.\n\n    Returns:\n        str: Updated well name display.\n    """\n    current_extraction = active_wells_df[active_wells_df["Name"]==well_name]["Value"].values[0]\n    \n    return f"{current_extraction:.2f} Mm\\u00b3/yr"\n\ndef styleWellValue (Wellvalue, maxValue):\n    if Wellvalue > maxValue:\n        valueStyle = {\n            'font-family': 'Roboto',\n            'font-size': "14px",\n            'font-weight': 'bold', \n            'color': '#d9534f'\n        }\n    else:\n        valueStyle = {\n            'font-family': 'Roboto',\n            'font-size': "14px",\n            'font-weight': "bold",\n            'color': '#2d4c4d'\n        }\n    return valueStyle\n    \n\ndef current_demand(event):\n    global demand_capita \n    if event.new == 90:\n        demand_capita  = 0.09*smallBusiness\n    if event.new == 100:\n        demand_capita  = 0.1*smallBusiness\n    if event.new == 120:\n        demand_capita  = 0.12*smallBusiness\n    if event.new == 135:\n        demand_capita  = 0.135*smallBusiness\n    update_indicators()\n    \n\ndef calculate_total_Demand():\n    """\n    Calculate the total water demand.\n\n    Returns:\n        float: Total water demand in Mm3/yr.\n    """\n    hexagons_filterd["Water Demand"] = (\n        hexagons_filterd["Current Pop"] * demand_capita * smallBusiness * 365 \n    ) / 1e6\n    \n    total = ((hexagons_filterd["Water Demand"]).sum()) + (\n        (hexagons_filterd["Industrial Demand"]).sum()\n    )\n    return total\n\ndef calculate_demand_by_balance():\n    """\n    Calculate the water demand grouped by balance areas.\n\n    Returns:\n        pd.Series: Water demand by balance area.\n    """\n    return active_wells_df.groupby("Balance area")["Water Demand"].sum()\n\ndef update_demand():\n    """\n    Update demand indicators.\n    """\n    total_demand = calculate_demand_by_balance()\n    for balance, indicator in calculate_demand_by_balance.items():\n        indicator.value = total_demand.get(balance, 0)\n\ndef calculate_lzh():\n    """\n    Calculate Leveringszekerheid (Delivery Security).\n\n    Returns:\n        float: Leveringszekerheid as a percentage.\n    """\n    total_extraction = calculate_total_extraction()\n    total_demand = calculate_total_Demand()\n    return round((total_extraction / total_demand) * 100, 2)\n\ndef calculate_lzh_by_balance():\n    """\n    Calculate Leveringszekerheid grouped by balance areas.\n\n    Returns:\n        dict: Leveringszekerheid by balance area.\n    """\n    lzh_by_balance = {}\n    balance_areas = active_wells_df["Balance area"].unique()\n\n    for area in balance_areas:\n        total_extraction = active_wells_df.loc[\n            active_wells_df["Balance area"] == area, "Value"\n        ].sum()\n\n        total_demand = hexagons_filterd.loc[\n            hexagons_filterd["Balance Area"] == area, "Water Demand"\n        ].sum()\n\n        lzh_by_balance[area] = (\n            round((total_extraction / total_demand) * 100, 2) if total_demand else 0\n        )\n    \n    return lzh_by_balance\n\n\ndef update_balance_lzh_gauges():\n    """\n    Update Leveringszekerheid gauges for balance areas.\n    """\n    lzh_by_balance = calculate_lzh_by_balance()\n    for area, gauge in balance_lzh_gauges.items():\n        gauge.value = lzh_by_balance.get(area, 0)\n        \n        \n        \n## MAP SECTION\n\njs_content: sourcetypes.javascript\n\n# Create map and add attributes\ndef create_map(lat,lon,zoom):\n    map_file = StringIO()\n    \n    js_file = StringIO()\n    \n    js_content = '''\n    \n    mapboxgl.accessToken = 'pk.eyJ1IjoiY3lnbnVzMjYiLCJhIjoiY2s5Z2MzeWVvMGx3NTNtbzRnbGtsOXl6biJ9.8SLdJuFQzuN-s4OlHbwzLg';\n    const map = new mapboxgl.Map({\n        container: 'map', // container ID'''+f'''\n        center: {[lon, lat]},\n        pitch: 60,\n        // starting position [lng, lat]. Note that lat must be set between -90 and 90\n        zoom:  {zoom}// starting zoom'''+'''\n        });    \n    '''\n    \n   \n    html_content: sourcetypes.html = '''\n        <!DOCTYPE html>\n        <html>\n        <head>\n        <link href="https://api.mapbox.com/mapbox-gl-js/v3.6.0/mapbox-gl.css" rel="stylesheet">\n        <script src="https://api.mapbox.com/mapbox-gl-js/v3.6.0/mapbox-gl.js"></script>\n        <style>\n        body { margin: 0; padding: 0; }\n        #map { position: absolute; top: 0; bottom: 0; width: 100%; }\n        </style>\n        </head>\n        <body>\n        <div id="map">map</div>\n        <script>'''+f'''\n            {js_content}\n        '''+'''\n        </script>\n        </body>\n        </html>              \n                 '''          \n                 \n                 \n    map_file.write(html_content)\n    map_file.seek(0)\n    \n    # Read the HTML content and escape it\n    html_file = map_file.read()\n    escaped_html = html.escape(html_file)\n    \n    iframe = f'<iframe srcdoc="{escaped_html}" style="height:100%; width:100%" frameborder="0"></iframe>'\n      \n    \n    return iframe\n\n\n\n\n\nm = folium.Map(\n    location=[52.28, 6.7], zoom_start=10,\n    tiles="Cartodb Positron"\n)\n\n\nicon_path = "./Assets/Water Icon.png"\nicon = folium.CustomIcon(\n        icon_path,\n        icon_size=(30, 30),\n    )\n   \n\ndef calculate_centroid(coordinates):\n    """\n    Calculate the centroid of a polygon.\n\n    Args:\n        coordinates (list): List of coordinates defining the polygon.\n\n    Returns:\n        tuple: Coordinates of the centroid (latitude, longitude).\n    """\n    polygon = Polygon(coordinates)\n    return polygon.centroid.y, polygon.centroid.x\n\ndef update_layers(wellsLayer=active_wells_df, industryLayer=industrial):\n    """\n    Update the layers on the map.\n\n    Returns:\n        folium.Map: Updated Folium map.\n    """\n    global m\n    \n    folium.TileLayer("OpenStreetMap",\n                     show=False).add_to(m)\n    \n    popup_well = folium.GeoJsonPopup(\n        fields=["Name", "Balance area", "Value"],\n        aliases=["Naam Put", "Balansgebied", "Onttrekking in Mm\xb3/jr"],\n    )\n\n    popup_hex = folium.GeoJsonPopup(\n        fields=["cityName", "Water Demand", "Population 2022"],\n        aliases=["Stadsnaam", "Watervraag in Mm\xb3/jr", "Bevolking - 2022"]\n    )\n\n    popup_industrial = folium.GeoJsonPopup(\n        fields=["Place", "Licensed", "Current_Extraction_2019"],\n        aliases=["Locatie", "Vergunde Onttrekking in Mm\xb3/jr", "Huidige Onttrekking in Mm\xb3/jr"]\n    )\n\n    \n    colormap = branca.colormap.StepColormap(\n        ["#caf0f8", "#90e0ef", "#00b4d8", "#0077b6", "#03045e"],\n        vmin=round(hexagons_filterd["Water Demand"].quantile(0.0),1),\n        vmax=round(cities_clean["Water Demand"].quantile(1),1),\n        caption="Totale watervraag in Mm\\u00b3/yr",\n    )\n    \n    active = wellsLayer[wellsLayer["Active"] == True]\n    \n    folium.GeoJson(\n        active,\n        name="Winningputten",\n        zoom_on_click=True,\n        popup=popup_well,\n        tooltip=folium.GeoJsonTooltip(fields=["Name"], aliases=["Well Name:"]),\n        marker=folium.Marker(\n            icon=folium.Icon(\n                icon_color="#f3f3f3", icon="arrow-up-from-ground-water", prefix="fa", color='cadetblue'\n            )\n        ),\n    ).add_to(m)\n    \n    folium.GeoJson(\n        industryLayer,\n        name="Industri\xeble Waterwinning",\n        zoom_on_click=True,\n        popup=popup_industrial,\n        tooltip=folium.GeoJsonTooltip(fields=["Place"], aliases=["Place:"]),\n        marker=folium.Marker(\n            icon=folium.Icon(\n                icon_color="#d9534f", icon="industry", prefix="fa", color='lightred'\n            )\n        ),\n\n    ).add_to(m)\n    \n    hex_layer = folium.GeoJson(\n        cities_clean,\n        name="Stadsvraag",\n        style_function=lambda x: {\n            "fillColor": (\n                colormap(x["properties"]["Water Demand"])\n                if x["properties"]["Water Demand"] is not None\n                else "transparent"\n            ),\n            "color": (\n                "darkgray"\n                if x["properties"]["cityName"] is not None\n                else "transparent"\n            ),\n            "fillOpacity": 0.8,\n            "weight": 0.7,\n        },\n        popup=popup_hex,\n    ).add_to(m)\n\n    folium.GeoJson(\n        main_pipes,\n        name="Hoofdleidingen",\n        style_function=lambda x: { \n            "color": "#E27D79",\n            "weight": (4 if x["properties"]["Diameter_mm"] > 350\n                       else (2 if x["properties"]["Diameter_mm"] > 250\n                       else 1)),\n            "Opacity": 0.6,\n        },\n        show=False\n    ).add_to(m)\n\n    folium.GeoJson(\n        hexagons_filterd,\n        name="Natura2000 Beperkt Gebied",\n        style_function=lambda x: {\n            "fillColor": (\n                "darkgreen"\n                if x["properties"]["Type"] == "Restricted Natura2000"\n                else "transparent"\n            ),\n            "color": (\n                "darkgray"\n                if x["properties"]["Balance Area"] is not None\n                else "transparent"\n            ),\n            "fillOpacity": 0.8,\n            "weight": 0.7,\n        }, \n        show=False,\n    ).add_to(m)\n\n    folium.GeoJson(\n        hexagons_filterd,\n        name="Beperkt Natuurnetwerk Nederland",\n        style_function=lambda x: {\n            "fillColor": (\n                "#CAFAA2"\n                if x["properties"]["Type"] == "Restricted Other"\n                else "transparent"\n            ),\n            "color": (\n                "darkgray"\n                if x["properties"]["Balance Area"] is not None\n                else "transparent"\n            ),\n            "fillOpacity": 0.8,\n            "weight": 0.7,\n        },\n        show=False,\n    ).add_to(m)\n    \n    folium.GeoJson(\n        balance_areas,\n        name="Balansgebieden",\n        style_function=lambda x: {\n            "fillColor": "transparent",\n            "color": "#93419F",\n            "weight": 3\n        },\n        show=True,\n        tooltip=folium.GeoJsonTooltip(fields=['Balance Area'], labels=True)\n    ).add_to(m)\n    \n    BA_4326 = balance_areas.to_crs(4326)\n    BA_4326["centroid"] = BA_4326.centroid\n    \n    for _, r in BA_4326.iterrows():\n        lat = r["centroid"].y\n        lon = r["centroid"].x\n        name = r["Balance Area"]\n        print(lat,lon)\n        folium.Marker(\n        location=[lat, lon],\n        icon=DivIcon(\n            icon_size=(150,36),\n            icon_anchor=(0,0),\n            html='<div class="Label" style="font-size: 10pt; color: #000000; ">{name}</div>'.format(name=name),)\n        ).add_to(m)\n\n    folium.LayerControl(position='topleft', autoZIndex=True).add_to(m)\n    \n    industryIcon = '''\n        var marker = L.AwesomeMarkers.icon({\n                icon_color="#d9534f", icon="industry", prefix="fa", color='lightred'\n            )});\n            '''\n    \n    # Use custom CSS to move the colormap legend to the bottom-right corner\n    legend_html = '''\n    <link rel="stylesheet" href="https://balladaniel.github.io/leaflet-dataclassification/leaflet-dataclassification.css" />\n    <script src="https://balladaniel.github.io/leaflet-dataclassification/leaflet-dataclassification.js"></script>\n    <link rel="stylesheet" href="//code.jquery.com/ui/1.12.1/themes/base/jquery-ui.css">\n\n    <script src="https://code.jquery.com/jquery-1.12.4.js"></script>\n    <script src="https://code.jquery.com/ui/1.12.1/jquery-ui.js"></script>\n           \n     <div id='maplegend' class='maplegend' \n         style='position: absolute; z-index:9999; border:2px solid grey; background-color:rgba(255, 255, 255, 0.8);\n         border-radius:6px; padding: 10px; font-size:14px; right: 20px; bottom: 20px;'>\n    \n    <div class='legend-scale'>\n        Legenda\n        <ul class='legend-labels'>\n            <li><i class="fa-solid fa-arrow-up-from-ground-water" style='color:#2F4279;'></i> Waterwinlocaties</li>\n            <li><i class="fa-solid fa-industry" style='color:#D9534F;'></i> Industri\xeble Waterwinlocaties</li>\n            <li>{colormap}</li>\n            <li>Leidingen <i class="fa-solid fa-minus fa-sm" style='color:#D9534F;'></i> <250mm \n                    <i class="fa-solid fa-minus fa-lg" style='color:#D9534F;'></i> 250mm - 350mm\n                    <i class="fa-solid fa-minus fa-2xl" style='color:#D9534F;'></i> >400mm</li>             \n            <li><i class="fa-solid fa-folder" style='color: darkgreen;'></i> Natura200 Beschermd Gebied</li>\n            <li><i class="fa-solid fa-folder" style='color: #CAFAA2;'></i> Beperkt Natuurnetwerk Nederland Gebied</li>\n            <li><i class="fa-regular fa-folder" style='color:#93419F;'></i> Balansgebied</li>\n\n        </ul>\n     </div>\n    </div>\n    '''.format(colormap=colormap._repr_html_(), industryIcon=industryIcon)\n\n    \n    \n    # Add the custom legend to the map\n    m.get_root().html.add_child(folium.Element(legend_html))\n\n    return m\n\n\n\n# Logarithmic function\ndef log_func(x, a, b):\n    return a * np.log(x) + b\n\n\n# Function to estimate extent for a specific well\ndef estimate_Damage_for_well(type, well_name, target_percentage):\n    # Find the row corresponding to the given well\n    well_row = type[type['Name'] == well_name]\n    \n    if well_row.empty:\n        print(f"Well '{well_name}' not found in the dataset.")\n        pass\n    else:\n        # Extract the available percentage columns (non-NaN values)\n        well_row = well_row.iloc[0]  # Select the first row as Series\n        perc_columns = well_row.dropna().index[1:]  # Exclude the 'Name' column\n        perc_values = [float(col) for col in perc_columns]\n        extents = well_row[perc_columns].values\n        \n        if len(perc_values) < 2:\n            return 0\n        \n        # Fit a logarithmic curve to the data\n        try:\n            popt, _ = curve_fit(log_func, perc_values, extents)\n            # Use the fitted curve to predict the extent at the target percentage\n            estimated_extent = log_func(target_percentage, *popt)                \n            return estimated_extent\n        except Exception as e:\n            print(f"Error in fitting the curve: {e}")\n            return 0\n            \n    \n\nactive_scenarios = set()\ntext = ["## Scenario"]\n\n\ndef update_scenarioTitle(new_title):\n    global text\n    base_title = "Status - 2022"\n\n    # Convert tuple to a list for modification\n    text = list(text)\n    # Update for main population scenarios\n    if Scenario_Button.value == "Bevolking 2035":\n        if "Versnelde Groei" in text:\n            text.remove("Versnelde Groei")\n        if base_title in text:\n            text.remove(base_title)\n        if new_title not in text:\n            text.append(new_title)\n    elif Scenario_Button.value == "Bevolking 2035 +1% toename":\n        if "Autonome Groei" in text:\n            text.remove("Autonome Groei")\n        if base_title in text:\n            text.remove(base_title)\n        if new_title not in text:\n            text.append(new_title)\n    elif Scenario_Button.value == "Bevolking - 2022":\n        if "Versnelde Groei" in text:\n            text.remove("Versnelde Groei")\n        if "Autonome Groei" in text:\n            text.remove("Autonome Groei")\n        if Scenario_Button.value not in text:\n            if new_title not in text:\n                text.append(new_title)\n\n    # Update for small business scenarios\n    if ScenarioSmall_Button.value == "Kleine Bedrijven   +10% Vraag":\n        if "Kleine Bedrijven Versnelde Groei" in text:\n            text.remove("Kleine Bedrijven Versnelde Groei")\n        if base_title in text:\n            text.remove(base_title)\n        if new_title not in text:\n            text.append(new_title)\n    elif ScenarioSmall_Button.value == "Kleine Bedrijven   +35% Vraag":\n        if "Kleine Bedrijven Autonome Groei" in text:\n            text.remove("Kleine Bedrijven Autonome Groei")\n        if base_title in text:\n            text.remove(base_title)\n        if new_title not in text:\n            text.append(new_title)\n    elif ScenarioSmall_Button.value == "Status - 2022":\n        if "Kleine Bedrijven Versnelde Groei" in text:\n            text.remove("Kleine Bedrijven Versnelde Groei")\n        if "Kleine Bedrijven Autonome Groei" in text:\n            text.remove("Kleine Bedrijven Autonome Groei")\n        if Scenario_Button.value not in text:\n            if new_title not in text:\n                text.append(new_title)\n    \n    # Convert the list back to a tuple for immutability\n    text = tuple(text)\n    \n    # Update the app title with the updated text list\n    app_title.object = " - ".join(text)\n    print(text)\n\n\n\ndef update_title(event):\n    global text\n    text =list(text)\n    if ButtonSmallWells.value:\n        if "Kleine Putten Gesloten" in text:\n            print("Tekst is er al")\n        else: \n            text.append("Kleine Putten Gesloten")\n            Measure1On()\n    if ButtonSmallWells.value == False:\n        Measure1Off()\n        if "Kleine Putten Gesloten" in text:\n            text.remove("Kleine Putten Gesloten")\n        else:\n            print("Tekst is er niet")\n    if ButtonCloseNatura.value:\n        if "Natura Putten Gesloten" in text:\n            print("Tekst is er al")\n        else: \n            text.append("Natura Putten Gesloten")\n            Measure2On()\n    if ButtonCloseNatura.value == False:   \n        Measure2Off()\n        if "Natura Putten Gesloten" in text:\n            text.remove("Natura Putten Gesloten")\n        else:\n            print("Tekst is er niet")\n    if ButtonSmartMeter.value:\n        if "Gebruik van Slimme Meters" in text:\n            print("Tekst is er al")\n        else: \n            text.append("Gebruik van Slimme Meters")\n            Measure3On()\n    if ButtonSmartMeter.value == False:     \n        Measure3Off()\n        if "Gebruik van Slimme Meters" in text:\n            text.remove("Gebruik van Slimme Meters") \n        else:\n            print("Tekst is er niet")\n    if ButtonImportWater.value:\n        if "Water Importeren" in text:\n            print("Tekst is er al")\n        else: \n            text.append("Water Importeren")\n            Measure4On()\n    if ButtonImportWater.value == False:     \n        Measure4Off()\n        if "Water Importeren" in text:\n            text.remove("Water Importeren") \n        else:\n            print("Tekst is er niet")\n    if ButtonAddExtraIndustrial.value:\n        if "Gebruik industri\xeble overcapaciteit" in text:\n            print("Tekst is er al")\n        else:\n            text.append("Gebruik industri\xeble overcapaciteit")\n            Measure5On()\n    if ButtonAddExtraIndustrial.value == False:\n        Measure5Off()\n        if "Gebruik industri\xeble overcapaciteit" in text:\n            text.remove("Gebruik industri\xeble overcapaciteit")\n        else:\n            print("Tekst is er niet")\n    \n    text = tuple(text)\n        \n    app_title.object = " - ".join(text)\n    print(text)\n    update_indicators()\n\n    \n\n\ndef ScenarioBase():\n    """\n    Voer het basisscenario uit met een vraag gelijk aan het jaar 2022.\n\n    Args:\n        event: Het gebeurtenisobject.\n    """\n    global demand_capita\n    hexagons_filterd["Current Pop"] = hexagons_filterd["Pop2022"]\n    hexagons_filterd["Water Demand"] = (\n        hexagons_filterd["Current Pop"] * demand_capita * smallBusiness * 365 \n    ) / 1e6\n    update_scenarioTitle("Bevolking - 2022")\n    print("Basisscenario hersteld")\n    update_indicators()\n\ndef Scenario1():\n    """\n    Voer het eerste scenario uit met een toename van de vraag.\n\n    Args:\n        event: Het gebeurtenisobject.\n    """\n    global demand_capita \n    hexagons_filterd["Current Pop"] = hexagons_filterd["Pop2022"] * 1.0209\n\n    hexagons_filterd["Water Demand"] = (\n        hexagons_filterd["Current Pop"] * demand_capita * smallBusiness * 365 \n    ) / 1e6\n    update_scenarioTitle("Autonome Groei")\n    print("Scenario 1 succesvol uitgevoerd")\n    update_indicators()\n\ndef Scenario2():\n    """\n    Voer het tweede scenario uit met een vraagtoename van 2,09%.\n    \n    Args:\n        event: Het gebeurtenisobject.\n    """\n    hexagons_filterd["Current Pop"] = hexagons_filterd["Pop2022"] * 1.0309\n\n    hexagons_filterd["Water Demand"] = (\n        hexagons_filterd["Current Pop"] * demand_capita * smallBusiness * 365\n    ) / 1e6\n        \n    update_scenarioTitle("Versnelde Groei")\n    print("Scenario 2 succesvol uitgevoerd")\n    update_indicators()\n\n    \ndef ScenarioSmallBusinessBase():\n    global smallBusiness\n    global demand_capita \n    smallBusiness = 1.2\n    update_scenarioTitle("Kleine Bedrijven Status 2022")\n    update_indicators()\n\ndef ScenarioSmallBusiness1():\n    global smallBusiness\n    global demand_capita \n    smallBusiness = 1.2*1.1\n    update_scenarioTitle("Kleine Bedrijven Autonome Groei")\n    update_indicators()\n\ndef ScenarioSmallBusiness2():\n    global smallBusiness\n    global demand_capita \n    smallBusiness = 1.2*1.35\n    update_scenarioTitle("Kleine Bedrijven Versnelde Groei")\n    update_indicators()\n\n\ndef Measure1On():\n    # Update the 'Active' column where 'Max_permit' is less than 5.00\n    condition = active_wells_df["Max_permit"] < 5.00\n    active_wells_df.loc[condition, "Active"] = False\n    \n    # Uncheck checkboxes corresponding to the wells that meet the condition\n    for well_name in active_wells_df.loc[condition, "Name"]:\n        checkboxes[well_name].value = False\n\n\ndef Measure1Off():\n    # Update the 'Active' column where 'Max_permit' is less than 5.00\n    condition = active_wells_df["Max_permit"] < 5.00\n    active_wells_df.loc[condition, "Active"] = True\n    \n    # Uncheck checkboxes corresponding to the wells that meet the condition\n    for well_name in active_wells_df.loc[condition, "Name"]:\n        try:\n            checkboxes[well_name].value = True\n        except: continue\n\n\ndef Measure2On():\n    """\n    Activate the second measure (closing Natura 2000 wells).\n    """\n    active_wells_df.loc[active_wells_df["Name"] == "Archemerberg", "Active"] = False\n    active_wells_df.loc[active_wells_df["Name"] == "Nijverdal", "Active"] = False\n    \n    # Update the checkboxes to reflect the new state\n    checkboxes["Archemerberg"].value = False\n    checkboxes["Nijverdal"].value = False\n\ndef Measure2Off():\n    """\n    Deactivate the second measure (closing Natura 2000 wells).\n    """\n    active_wells_df.loc[active_wells_df["Name"] == "Archemerberg", "Active"] = True\n    active_wells_df.loc[active_wells_df["Name"] == "Nijverdal", "Active"] = True\n    \n    # Update the checkboxes to reflect the new state\n    checkboxes["Archemerberg"].value = True\n    checkboxes["Nijverdal"].value = True\n    \ndef Measure3On():\n    """\n    Activate the third measure (using smart meters).\n    """\n    global demand_capita\n    demand_capita  = ButtonDemand.value/1000 * 0.95\n    hexagons_filterd["Water Demand"] = (\n        hexagons_filterd["Current Pop"] * demand_capita * smallBusiness * 365\n    ) / 1e6\n\ndef Measure3Off():\n    """\n    Deactivate the third measure (using smart meters).\n    """\n    global demand_capita\n    demand_capita  = ButtonDemand.value/1000\n    hexagons_filterd["Water Demand"] = (\n        hexagons_filterd["Current Pop"] * demand_capita * smallBusiness * 365\n    ) / 1e6\n    \nfrom shapely.geometry import Point\nimport geopandas as gpd\nimport folium\n\ndef Measure4On():\n    """\n    Activate the fourth measure (importing water).\n    """\n    # Define the geometry point for the new well.\n    new_geometry = Point(253802.6, 498734.2)  # Projected coordinates\n\n    # Add a new row using .loc by assigning to a new index (e.g., 'Imports')\n    active_wells_df.loc[active_wells_df.index.max() + 1] = {\n        "Name": "Imports",\n        "Num_Wells": 3,\n        "Ownership": 0,\n        "Max_permit": 4.5,\n        "Balance area": "Imported",\n        "Active": True,\n        "Current Value": 4.38,\n        "Value": 4.38,\n        "OPEX_m3": 0.0598173515981735,\n        "Drought_m3": 0,\n        "CO2_m3": 0,\n        "Env_m3": 0,\n        "envCost": 0,\n        "OPEX": 0.262,\n        "geometry": new_geometry\n    }\n\n    # Select the newly added well for visualization\n    new_well = active_wells_df.loc[active_wells_df["Name"] == 'Imports']\n\n    # Convert the selected well into a GeoDataFrame and create the GeoJSON representation.\n    new_well_gdf = gpd.GeoDataFrame(new_well, geometry='geometry')\n    new_well_gdf = new_well_gdf.to_json()\n\n    # Add the new well as a GeoJson object on the map\n    folium.GeoJson(\n        new_well_gdf,\n        name="Import Water",\n        zoom_on_click=True,\n        tooltip=folium.GeoJsonTooltip(fields=["Name"], aliases=["Well Name:"]),\n        marker=folium.Marker(\n            icon=folium.Icon(\n                icon_color="#f3f3f3", icon="arrow-up-from-ground-water", prefix="fa", color='cadetblue'\n            )\n        ),\n        show=True\n    ).add_to(m)\n\n \n\ndef Measure4Off():\n    """\n    Deactivate the fourth measure (importing water).\n    """\n    try:  \n        # Use .loc to identify rows where 'Name' is 'Imports' and drop them\n        active_wells_df.drop(active_wells_df.loc[active_wells_df["Name"] == 'Imports'].index, inplace=True)     \n    except KeyError:\n        print("Row does not exist")\n\ndef Measure5On():\n    global industrialExcess\n    industrialExcess = industrial["Licensed"].sum()-industrial["Current_Extraction_2019"].sum()\n    \ndef Measure5Off():\n    global industrialExcess\n    industrialExcess = 0  \n\n    \n    \ndef Reset(event):\n    """\n    Reset the application to its initial state.\n\n    Args:\n        event: The event object.\n    """\n    global demand_capita\n    global smallBusiness\n    demand_capita = 0.135\n    smallBusiness = 1.2\n    hexagons_filterd["Current Pop"] = hexagons_filterd["Pop2022"]\n    hexagons_filterd["Water Demand"] = (\n        hexagons_filterd["Current Pop"] * demand_capita * smallBusiness * 365\n    ) / 1e6\n    global active_wells_df\n    active_wells_df = gpd.GeoDataFrame(\n    {\n        "Name": wells["Name"],\n        "Num_Wells": wells["Num_Wells"],\n        "Ownership": wells["Inside_Prop"],\n        "Max_permit": wells["Permit__Mm3_per_jr_"],\n        "Balance area": wells["Balansgebied"],\n        "Active": [True] * len(wells),\n        "Current Extraction" : wells["Extraction_2023__Mm3_per_jr_"],\n        "Value": wells["Extraction_2023__Mm3_per_jr_"],\n        "OPEX_m3": wells["totOpex_m3"],\n        "Drought_m3": wells["DroughtDamage_EUR_m3"],\n        "CO2_m3": wells["CO2Cost_EUR_m3"],\n        "Env_m3": wells["env_cost_m3"],\n        "envCost": wells["env_cost_m3"]\n        * wells["Extraction_2023__Mm3_per_jr_"]\n        * 1e6,\n        "OPEX": wells["totOpex_m3"] * wells["Extraction_2023__Mm3_per_jr_"] * 1e6,\n        "CAPEX": 0,\n        "geometry": wells["geometry"],\n    }\n)\n    Scenario_Button.value = 'Bevolking - 2022'\n    ScenarioSmall_Button.value = 'Status - 2022'\n    ButtonDemand.value = 135\n    ButtonSmallWells.value, ButtonCloseNatura.value, ButtonImportWater.value, ButtonSmartMeter.value = False, False, False, False\n    update_scenarioTitle("Status - 2022")\n    update_indicators()\n\ndef update_indicators(arg=None):\n    total_extraction.value = calculate_total_extraction()\n    total_opex.value = calculate_total_OPEX()\n    total_capex.value = calculate_total_CAPEX()\n    excess_cap.value = calculate_available()\n    natureMidDamage_value.value=calculate_affected_Sensitive_Nature()\n    natureHighDamage_value.value=calculate_affected_VerySensitive_Nature()\n    # own_pane.value = calculate_ownership()\n    co2_pane.value= calculate_total_CO2_cost()\n    drought_pane.value = calculate_total_Drought_cost()\n    # update_balance_opex()\n    # update_balance_lzh_gauges()\n    total_demand.value = calculate_total_Demand()\n    total_difference.value = total_extraction.value - total_demand.value\n    lzh.value = calculate_lzh()\n    \n\n\n# Initialize a dictionary to hold the active state and slider references\nactive_wells = {}\n\n# Initialize a dictionary to hold the balance area layouts\nbalance_area_buttons = {}\n\n# Initialize a dictionary to hold the sliders\ncheckboxes = {}\n\n# Setup Well Radio Buttons\nRadio_buttons = []\nWell_radioB = []\noptions = ["-15% van Huidige", "Huidige", "85% van Max. Vergunning", "Maximale Vergunning", "115% van Max. Vergunning"]\n\n\n\nfor index, row in wells.iterrows():\n    wellName = row["Name"]\n    current_value = row["Extraction_2023__Mm3_per_jr_"]\n    maxValue =  row["Permit__Mm3_per_jr_"]\n    balance_area = row["Balansgebied"]\n    radio_group = pn.widgets.RadioButtonGroup(\n        name=wellName,\n        options=options,\n        button_type='success',\n        value="Huidige",\n        orientation = "vertical"\n    )\n    \n    # Add Checkbox and listeners\n    checkbox = pn.widgets.Switch(name="Active", value=True, max_width=20)\n    checkbox.param.watch(partial(toggle_well, well_name=wellName), "value")\n    radio_group.param.watch(partial(update_radio, well_name=wellName), "value")\n    \n    # Store the checkbox in the dictionary for later updates\n    checkboxes[wellName] = checkbox\n    \n    NameP = pn.pane.Str(wellName + f"\\nHuidige operatie op {(current_value/maxValue)*100:0.2f}%", styles={\n        'font-size': "14px",\n        'font-family': "Barlow",\n        'font-weight': 'bold',\n    })\n\n    \n    Wellvalue = update_well_Value(wellName)\n    well_style=styleWellValue(Wellvalue,maxValue)\n    \n    extractionPerWell = pn.pane.HTML(object=update_well_Value_formatted(wellName), styles=well_style)\n    NameState = pn.Row(NameP, checkbox)\n    Well_radioB = pn.Column(NameState, extractionPerWell, radio_group, styles=miniBox_style)\n    \n    # Add the well layout to the appropriate balance area layout\n    if balance_area not in balance_area_buttons:\n        balance_area_buttons[balance_area] = []\n    balance_area_buttons[balance_area].append(Well_radioB)\n    \n    # Store the active state and radio group reference along with the NamePane\n    active_wells[wellName] = {"active": True, "value": current_value, "radio_group": radio_group, "name_pane": extractionPerWell}\n\n \nall_wellsButton = pn.widgets.RadioButtonGroup(\n        name="All Wells",\n        options=options,\n        button_type='success',\n        value="Huidige",\n        orientation = "vertical"\n    )\nall_wellsButton.param.watch(update_allRadio,"value")\n    \n    \n# Maak HTML-tekst voor Wells-tabblad\nbalance_area_Text = pn.pane.HTML('''\n    <h3 align= "center" style="margin: 5px;"> Balansgebieden</h3><hr>\n    <p> Hoofdcontrole: Met deze optie kunt u de putten tegelijkertijd bedienen. Anders kunt u ook put voor put bedienen via het uitklapmenu.</p>\n    '''\n    , width=300, align="start")\n\n# Maak een lay-out voor de radioknoppen\nradioButton_layout = pn.Accordion(styles={'width': '95%', 'color':'#151931'})\nfor balance_area, layouts in balance_area_buttons.items():\n    balance_area_column = pn.Column(*layouts)\n    radioButton_layout.append((balance_area, balance_area_column))\n\n    \n\n    \nScenario_Button = pn.widgets.RadioButtonGroup(name="Maatregelenknop Groep", options=['Bevolking - 2022', 'Bevolking 2035', 'Bevolking 2035 +1% toename'], button_type='warning', styles={\n    'width': '93%', 'border': '3px' }, orientation='vertical'\n                                             )\nScenario_Button.param.watch(update_scenarios, "value")\n\nScenarioSmall_Button = pn.widgets.RadioButtonGroup(name="Maatregelenknop Groep", options=['Status - 2022', 'Kleine Bedrijven   +10% Vraag', 'Kleine Bedrijven   +35% Vraag'], button_type='warning', styles={\n    'width': '93%', 'border': '3px' }, orientation='vertical'\n                                             )\nScenarioSmall_Button.param.watch(update_scenariosSmall, "value")\n\n\n# Button1 = pn.widgets.Button(\n#     name='Autonomous growth', button_type="primary", width=300, margin=10,\n# )\n# Button1.param.watch(update_title, 'value')\n# Button1.on_click(Scenario1)\n\n# Button2 = pn.widgets.Button(\n#     name="Accelerated growth", button_type="primary", width=300, margin=10, \n# )\n# Button2.param.watch(update_title, 'value')\n# Button2.on_click(Scenario2)\n\nButtonSmallWells = pn.widgets.Toggle(\n    name='Sluit Kleine Putten', button_type="primary", button_style="outline", width=300, margin=10, \n)\nButtonSmallWells.param.watch(update_title, 'value')\n\nButtonCloseNatura = pn.widgets.Toggle(\n    name='Sluit Natura 2000 Putten', button_type="primary", button_style="outline", width=300, margin=10, \n)\nButtonCloseNatura.param.watch(update_title, 'value')\n\nButtonDemand = pn.widgets.RadioButtonGroup(name='Waterbehoefte per Hoofd van de Bevolking', options=[135,120,100,90], button_type='warning',\n                                            width=80, orientation='horizontal', styles={\n    'width': '97%', 'flex-wrap': 'no-wrap' }, align=("center", "center"))\nButtonDemand.param.watch(current_demand, 'value')\n\n# Button5= pn.Row(ButtonDemand, align=("center", "center"))\n\nButtonImportWater = pn.widgets.Toggle(\n    name='Importeer Water', button_type="primary", button_style="outline", width=300, margin=10)\nButtonImportWater.param.watch(update_title, 'value')\n\nButtonAddExtraIndustrial = pn.widgets.Toggle(name="Voeg Industrieel Water Toe",  button_type="primary", button_style="outline", width=300, margin=10,)\nButtonAddExtraIndustrial.param.watch(update_title, 'value')\n\nButtonSmartMeter = pn.widgets.Toggle(name="Gebruik Slimme Meters", button_type='primary', button_style='outline', width=300, margin=10)\nButtonSmartMeter.param.watch(update_title, 'value')\n\nButtonReset = pn.widgets.Button(\n    name='Reset', button_type='danger', width=300, margin=10\n)\nButtonReset.on_click(Reset)\n\n\n# textYears = pn.pane.HTML(\n#     '''\n#     <h3 align= "center" style="margin: 5px;"> Year Selection</h3><hr>\n#   ''', width=300, align="start", styles={"margin": "5px"}\n# )\n\ntextDivider3 = pn.pane.HTML('''<hr class="dashed"> <h3 align= "center" style="margin: 5px;">Scenario's Kleine Bedrijven  <svg xmlns="http://www.w3.org/2000/svg" height="15px" width="15px" viewBox="0 0 512 512" style="cursor:pointer; color: lightgray;"\n     ><g><title>"Small Business include bakeries, hair saloons, retail stores, shopping malls, etc."</title><!--!Font Awesome Free 6.6.0 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free Copyright 2024 Fonticons, Inc.--><path d="M464 256A208 208 0 1 0 48 256a208 208 0 1 0 416 0zM0 256a256 256 0 1 1 512 0A256 256 0 1 1 0 256zm169.8-90.7c7.9-22.3 29.1-37.3 52.8-37.3l58.3 0c34.9 0 63.1 28.3 63.1 63.1c0 22.6-12.1 43.5-31.7 54.8L280 264.4c-.2 13-10.9 23.6-24 23.6c-13.3 0-24-10.7-24-24l0-13.5c0-8.6 4.6-16.5 12.1-20.8l44.3-25.4c4.7-2.7 7.6-7.7 7.6-13.1c0-8.4-6.8-15.1-15.1-15.1l-58.3 0c-3.4 0-6.4 2.1-7.5 5.3l-.4 1.2c-4.4 12.5-18.2 19-30.6 14.6s-19-18.2-14.6-30.6l.4-1.2zM224 352a32 32 0 1 1 64 0 32 32 0 1 1 -64 0z"/><g></svg> </h3> <hr>''')\n\ntextScenarioPop = pn.pane.HTML(\n    '''\n    <h3 align= "center" style="margin: 5px;">Scenario's Bevolking</h3><hr>'''\n    , width=300, align="start"\n)\n\ntextB2 = pn.pane.HTML(\n    '''<b>Scenario met een vraagtoename van 35% &#8628;</b>''', width=300, align="start"\n)\n\ntextMeasureSupp = pn.pane.HTML(\n    '''<hr class="dashed"><h3 align= "center" style="margin: 5px;"> Aanvoermaatregelen </h3> <hr>\n    <b>Sluit alle putlocaties met een productie van minder dan 5 Mm\\u00b3/jr &#8628;</b>''', width=300, align="start", styles={}\n)\n\ntextCloseNatura = pn.pane.HTML(\n    '''\n    <b>Sluit alle putlocaties binnen 100m van een Natura 2000-gebied &#8628;</b>''', width=300, align="start", styles={}\n)\n\ntextMeasureDemand = pn.pane.HTML(\n    '''<hr class="dashed"><h3 align= "center" style="margin: 5px;"> Vraagmaatregelen </h3> <hr>\n    <b>Waterverbruik per hoofd van de bevolking in L/d</b>''', width=300, align="start", styles={}\n)\n\ntextImport = pn.pane.HTML(\n    '''\n    <b>Water importeren uit WAZ Getelo, NVB Nordhorn en Haaksbergen. Import van 4,5 Mm\\u00b3/jr &#8628;</b>''', width=300, align="start", styles={}\n)\n\ntextSmartM = pn.pane.HTML('''\n    <b>Gebruik van slimme meters thuis, vermindering van 5% van het verbruik &#8628;</b>''', width=300, align="start", styles={}\n)\n\ntextIndustrial = pn.pane.HTML(\n    '''<b>Voeg ongebruikt water uit industri\xeble vergunningen toe. Voeg 1,66 Mm\xb3/jr toe &#8628;</b>\n''', width=300, align="start"\n)\n\ntextEnd = pn.pane.HTML(\n    '''<hr class="dashed">\n    ''', width=300, align="start", styles={}\n)\n\ntextDivider0 = pn.pane.HTML('''<hr class="dashed">''')\ntextDivider1 = pn.pane.HTML('''<hr class="dashed">''')\ntextDivider2 = pn.pane.HTML('''<hr class="dashed">''')\n\nfile_create = pn.widgets.Button(name='Create Report', button_type='primary', width=300, margin=10,)\n\nfile_download = pn.widgets.FileDownload(file="Vitalens_report.pdf", button_type="primary" , width=300, margin=10,)\n\n# Create a spinner\nspinner = pn.indicators.LoadingSpinner(width=30, height=30, value=False)\n\ndef spacer(size):\n    spacerVertical = pn.Spacer(height=size)\n    return spacerVertical\n\ndisclaimer = pn.pane.HTML('''<div style="font-family: Barlow, Arial, sans-serif; padding: 20px; color: #333; font-size: 14px;">\n  <div>\n    <h1 style="color: #3850A0;">Welkom bij de Vitalens App</h1>\n    <p>\n      Deze app helpt je om waterputten in de regio Overijssel Zuid te beheren en te analyseren. Het stelt gebruikers in staat om de capaciteit van de putten, kosten, milieu-impact en andere belangrijke factoren voor de planning van watervoorzieningen bij te houden.\n    </p>\n\n    <h2>Belangrijkste functies</h2>\n    <ul>\n      <li><strong>Live Datavisualisatie:</strong> Bekijk en werk samen met putlocaties, extractieniveaus en milieugrenzen.</li>\n      <li><strong>Scenarioanalyse:</strong> Simuleer verschillende vraagscenario's voor water, zoals bevolkingsgroei of de behoeften van kleine bedrijven, om te zien hoe deze de watervoorziening en kosten kunnen be\xefnvloeden.</li>\n      <li><strong>Milieukostenramingen:</strong> Bereken milieukosten zoals CO2-uitstoot en de effecten van droogte voor elke put, en bekijk de beperkingen voor beschermde gebieden zoals Natura2000.</li>\n      <li><strong>Aangepast putbeheer:</strong> Verander de extractieniveaus en status (actief of inactief) van putten om watergebruik en effici\xebntie te optimaliseren.</li>\n      <li><strong>Interactieve data-exploratie:</strong> Verken gedetailleerde informatie over putten, waaronder leveringszekerheid, operationele kosten, milieu-impact en prestaties per gebied.</li>\n    </ul>\n\n    <h2>Disclaimer</h2>\n    <p>\n      Deze app biedt nuttige inzichten en visualisaties voor het beheer van water, maar is gebaseerd op schattingen en aannames. De daadwerkelijke prestaties van putten, milieu-impact en kosten kunnen vari\xebren door factoren in de echte wereld, zoals veranderende omstandigheden of nieuwe regelgeving.\n    </p>\n    <p>\n      <strong>Let op:</strong> De resultaten van de app zijn alleen bedoeld als richtlijn en zijn mogelijk niet exact. Voor kritieke beslissingen, raadpleeg lokale experts en gebruik geverifieerde gegevens.\n    </p>\n\n    <p style="color: #666; font-size: 14px;">\n      \xa9 2024 Vitalens App. Vitens en Universiteit Twente. Alle rechten voorbehouden.\n    </p>\n  </div>\n</div>\n\n\n                         \n                         ''', width=700, max_height=800)\n\nflaotingDisclaimer = pn.layout.FloatPanel(disclaimer, name= "Welcome", margin=20, contained=False, position="center") \n\n\n\nscenario_layout = pn.Column(textScenarioPop, Scenario_Button, textDivider3, ScenarioSmall_Button, textEnd, ButtonReset, width=320)\n\nSupply_measures_layout = pn.Column(textMeasureSupp, ButtonSmallWells,textCloseNatura, ButtonCloseNatura, textImport, ButtonImportWater,  textIndustrial, ButtonAddExtraIndustrial, textEnd, ButtonReset, width=320)\n\nDemand_measures_layout = pn.Column(textMeasureDemand, ButtonDemand, textDivider0, textSmartM, ButtonSmartMeter, textEnd, ButtonReset, width = 320)\n\nfirstColumn = pn.Column(balance_area_Text,all_wellsButton, radioButton_layout)\nsecondColumn = pn.Column(file_create, spinner, file_download)\n\n\n\n\ntabTop = pn.Tabs(("1. Scenario's", scenario_layout), ("2. Aanbod", Supply_measures_layout), ("3. Vraag", Demand_measures_layout), width = 320)\ntabBottom = pn.Tabs(("4. Putcapaciteiten", firstColumn), ("5. Rapport genereren", secondColumn), width = 320)\n\ntabs = pn.Column(tabTop, tabBottom, sizing_mode="scale_height")\n\n# MAIN WINDOW\n\n# map_pane = pn.pane.HTML(create_map(52.38, 6.7, 10), sizing_mode="stretch_both")\nmap_pane = pn.pane.plot.Folium(update_layers(), sizing_mode="stretch_both")\n\nminusSVG= pn.pane.SVG('<svg viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"><g id="SVGRepo_bgCarrier" stroke-width="0"></g><g id="SVGRepo_tracerCarrier" stroke-linecap="round" stroke-linejoin="round"></g><g id="SVGRepo_iconCarrier"> <path d="M6 12L18 12" stroke="#4139a7" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"></path> </g></svg>', max_width=40,sizing_mode='stretch_width', align='center')\n\nequalSVG = pn.pane.SVG('<svg viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"><g id="SVGRepo_bgCarrier" stroke-width="0"></g><g id="SVGRepo_tracerCarrier" stroke-linecap="round" stroke-linejoin="round"></g><g id="SVGRepo_iconCarrier"> <path d="M3 8C2.44772 8 2 8.44772 2 9C2 9.55228 2.44772 10 3 10H21C21.5523 10 22 9.55228 22 9C22 8.44772 21.5523 8 21 8H3Z" fill="#4139a7"></path> <path d="M3 14C2.44772 14 2 14.4477 2 15C2 15.5523 2.44772 16 3 16H21C21.5523 16 22 15.5523 22 15C22 14.4477 21.5523 14 21 14H3Z" fill="#4139a7"></path> </g></svg>', max_width=40,sizing_mode='stretch_width', align='center')\n\ntotal_extraction = pn.indicators.Number(\n    name="Totale Levering",\n    value=calculate_total_extraction(),\n    format="{value:.2f} Mm\\u00b3/jr",\n    default_color='#3850a0',\n    font_size="20pt",\n    title_size="12pt",\n    sizing_mode="scale_width",\n    align='center',\n    colors=[(wells["Extraction_2023__Mm3_per_jr_"].sum() - 0.1, '#D9534F'), (wells["Extraction_2023__Mm3_per_jr_"].sum(), '#3850a0'), (1000, '#92C25B')]\n)\n\ntotal_demand = pn.indicators.Number(\n    name="Totale Watervraag",\n    value=calculate_total_Demand,\n    format="{value:0,.2f} Mm\\u00b3/jr",\n    font_size="20pt",\n    title_size="12pt",\n    default_color='#3850a0',\n    sizing_mode="scale_width", align='center',\n    colors=[(original_demand - 0.1, '#92C25B'), (original_demand, '#3850a0'), (1000, '#D9534F')]\n)\n\ntotal_difference = pn.indicators.Number(\n    name="Waterbalans",\n    value=calculate_difference(),\n    format="{value:.2f} Mm\\u00b3/jr",\n    colors=[(0, '#d9534f'), (10, '#f2bf58'), (100, '#92c25b')],\n    default_color='#3850a0',\n    font_size="20pt",\n    title_size="12pt",\n    sizing_mode="scale_width", align='center'\n)\n\ntotal_extraction_TT = pn.widgets.TooltipIcon(value="De totale levering wordt berekend als de som van de volumes grondwater die per locatie in een jaar worden onttrokken. De totale vraag wordt berekend als het jaarlijkse verbruik van drinkwater door inwoners en kleine bedrijven.")\n\ntotal_opex = pn.indicators.Number(\n    name="Totale OPEX",\n    value=calculate_total_OPEX(),\n    format="{value:0,.2f} M\\u20AC/jr",\n    default_color='#3850a0',\n    font_size="20pt",\n    title_size="12pt",\n    align="center",\n    sizing_mode="stretch_width",\n    colors=[(original_OPEX - 0.1, '#92C25B'), (original_OPEX, '#3850a0'), (1000, '#D9534F')]\n)\n\ntotal_opex_TT = pn.widgets.TooltipIcon(value="Totale jaarlijkse operationele uitgaven (OPEX).")\n\ntotal_capex = pn.indicators.Number(\n    name="Totale CAPEX",\n    value=calculate_total_CAPEX(),\n    format="{value:0,.2f} M\\u20AC",\n    default_color='#3850a0',\n    font_size="20pt",\n    title_size="12pt",\n    align="center",\n    sizing_mode="stretch_width",\n    colors=[(0, '#3850a0'), (1000, '#D9534F')]\n)\n\n\ntotal_capex_TT = pn.widgets.TooltipIcon(value="Totale investeringsuitgaven (CAPEX) voor het uitbreiden van de onttrekkingscapaciteit.")\n\n\n# balance_opex = calculate_total_OPEX_by_balance()\n# balance_opex_indicators = {\n#     balance: pn.indicators.Number(\n#         name=f"OPEX {balance}",\n#         value=value,\n#         format="{value:0,.2f} M\\u20AC/yr",\n#         default_color='#3850a0',\n#         font_size="28pt",\n#         title_size="18pt",\n#         align="center",\n#     )\n#     for balance, value in balance_opex.items()\n# }\n\nexcess_cap = pn.indicators.Number(\n    name="Overcapaciteit",\n    value=calculate_available(),\n    format="{value:0.2f} Mm\\u00b3/yr",\n    default_color='#3850a0',\n    font_size="20pt",\n    title_size="12pt",\n    colors=[(original_excess-0.1, '#D9534F'), (original_excess, '#3850a0'),(1000, '#92C25B')]\n\n)\n\nexcess_cap_TT = pn.widgets.TooltipIcon(value="Jaarlijks beschikbaar water dat niet uit de putten wordt gewonnen en binnen de maximaal toegestane onttrekking valt.")\nexcess_cap_row = pn.Row(excess_cap, excess_cap_TT)\n\nindustrial_extract = pn.indicators.Number(\n    name="Industri\xeble Wateronttrekking",\n    value=calculate_industrial_extract(),\n    format="{value:0.2f} Mm\\u00b3/yr",\n    default_color='#3850a0',\n    font_size="20pt",\n    title_size="12pt",\n)\nindustrial_extract_TT = pn.widgets.TooltipIcon(value="Geschatte jaarlijkse grondwateronttrekking door grote industrie\xebn waar Vitens geen controle over heeft.")\n\n\nindustrial_extract_row = pn.Row(industrial_extract, industrial_extract_TT)\n\n\nright_pane = pn.Column(excess_cap_row,industrial_extract_row)\n\n# own_pane = pn.indicators.Number(\n#     name="Landownership",\n#     value=calculate_ownership(),\n#     format="{value:0.2f} %",\n#     default_color='#3850a0',\n#     font_size="20pt",\n#     title_size="12pt",\n#     align="center",\n#     colors=[(75, "#F19292"), (85, "#F6D186"), (100, "#CBE2B0")],\n#     sizing_mode="stretch_width"\n# )\n\nnatureMidDamage_value = pn.indicators.Number(\n    name="Geschatte <b>Gevoelige</b> Natuur getroffen gebied",\n    value=calculate_affected_Sensitive_Nature(),\n    format="{value:0.2f} Ha",\n    default_color='#3850a0',\n    font_size="14pt",\n    title_size="10pt",\n    sizing_mode="stretch_both",\n    styles = {\n        'font-family': "Roboto"\n    }\n)\n\nnatureHighDamage_value = pn.indicators.Number(\n    name="Geschatte <b>Zeer Gevoelige</b> Natuur getroffen gebied",\n    value=calculate_affected_VerySensitive_Nature(),\n    format="{value:0.2f} Ha",\n    default_color='#3850a0',\n    font_size="14pt",\n    title_size="10pt",\n    # sizing_mode="stretch_both",\n    styles = {\n        'font-family': "Roboto"\n    }\n)\n\nnatureDamage_TT = pn.widgets.TooltipIcon(value='Dit gebied komt overeen met de omvang van droogtegevoelige, grondwaterafhankelijke natuur die mogelijk wordt be\xefnvloed door grondwaterwinning.')\n\n\n# nature_title = pn.Row(natureMidDamage_value,natureDamage_TT, sizing_mode="scale_both" )\n\n# Use pn.bind to dynamically bind the number of stars to the pane\nkeukenhofsMid = pn.bind(generate_area_SVG, natureMidDamage_value)\nkeukenhofsHigh = pn.bind(generate_area_SVG, natureHighDamage_value)\nkeuk_text = pn.pane.HTML("<p style='font-size: small;'>Weergegeven in aantal stadscentra van Enschede</p>")\nnatura_pane = pn.Column(natureDamage_TT, natureHighDamage_value, spacer(10), keukenhofsHigh, natureMidDamage_value, spacer(50), keukenhofsMid, keuk_text, sizing_mode='stretch_both')\n\npipes_TT = pn.widgets.TooltipIcon(value="Elk pictogram vertegenwoordigt het aantal verbindingen tussen twee balansgebieden, dit is een indicator van kwetsbaarheid in het systeem.")\n\npipes_pane = pn.Column(\n    pipes_TT, \n    generate_pipes_SVG("Reggeland", "Stedenband", 1), \n    generate_pipes_SVG("Reggeland", "Hof van Twente", 2), \n    generate_pipes_SVG("Reggeland", "Dinkelland", 1), \n    generate_pipes_SVG("Hof van Twente", "Stedenband", 3), \n    generate_pipes_SVG("Dinkelland", "Stedenband", 1), \n    width=350\n)\n\nco2_pane = pn.indicators.Number(\n    name="CO\\u2082 Emissiekosten",\n    value=calculate_total_CO2_cost(),\n    format="{value:0,.2f} M\\u20AC/jr",\n    default_color='#3850a0',\n    font_size="20pt",\n    title_size="12pt",\n    colors=[(original_CO2 - 0.1, '#92C25B'), (original_CO2, '#3850a0'), (1000, '#D9534F')]\n)\n\ndrought_pane = pn.indicators.Number(\n    name="Schadekosten door Droogte",\n    value=calculate_total_Drought_cost(),\n    format="{value:0,.2f} M\\u20AC/jr",\n    default_color='#3850a0',\n    font_size="20pt",\n    title_size="12pt",\n    colors=[(original_Draught - 0.1, '#92C25B'), (original_Draught, '#3850a0'), (1000, '#D9534F')]\n)\n\nlzh = pn.indicators.Gauge(\n    name="Algemene LZH",\n    value=calculate_lzh(),\n    bounds=(0, 150),\n    format="{value} %",\n    colors=[(0.66, "#D9534F"), (0.8, "#f2bf57"), (0.9, "#92C25B"), (1, "#8DCEC0")],\n    custom_opts={\n        "pointer": {"interStyle": {"color": "auto"}},\n        "detail": {"valueAnimation": True, "color": "inherit"},\n    },\n    align=("center", 'center'), height=250, title_size=14\n)\n\nlzh.param.watch(update_indicators, "value")\nlzh_definition = pn.pane.HTML("LZH: Het is het percentage van de vraag naar drinkwater dat door de levering wordt gedekt")\nlzh_tooltip = pn.widgets.TooltipIcon(value="LZH: Leveringszekerheid, is het percentage van de vraag naar drinkwater dat door de levering wordt gedekt. Je kunt de LZH voor elk balansgebied zien door de tabbladen aan de rechterkant te selecteren. Deze waarden gaan uit van een gesloten systeem.", width=10, align='end')\n\n# LZH for each balance area - currently not on display\n"""\nbalance_lzh_gauges = {}\nbalance_lzh_values = calculate_lzh_by_balance()\nfor area, value in balance_lzh_values.items():\n    gauge = pn.indicators.Gauge(\n        name=f"LZH \\n{area}",\n        value=value,\n        bounds=(0, 630),\n        format="{value} %",\n        colors=[(0.2, "#D9534F"), (0.24, "#f2bf57"),(0.27, "#92C25B"), (1, "#8DCEC0")],\n        custom_opts={\n        "pointer": {"interStyle": {"color": "auto"}},\n        "detail": {"valueAnimation": True, "color": "inherit"},\n    },\n    align=("center",'center'), height = 250, title_size = 14\n    )\n    balance_lzh_gauges[area] = gauge\n"""\n\n\ndef printResults(filename1):\n    print("Button clicked, generating report...")\n\n    printingReport.styledWells(active_wells_df)\n    printingReport.generate_matplotlib_stackbars(active_wells_df, filename1)\n    # printingReport.generate_image_fromInd(pane=lzh, filename=filename2)\n    printingReport.createPDF(filename1, Scenario_Button, ScenarioSmall_Button, ButtonSmallWells, ButtonCloseNatura, ButtonImportWater, ButtonAddExtraIndustrial, ButtonDemand,total_demand,total_extraction,total_opex,total_capex, co2_pane,drought_pane,natureMidDamage_value, natureHighDamage_value)\n    return print("File Created")\n\n# When clicking the button, show the spinner and run the function\ndef on_button_click(event):\n    spinner.value = True  # Show the spinner\n    printResults("wells_Distribution.png")\n    spinner.value = False  # Hide the spinner when done\n    pn.state.notifications.position = 'bottom-left'\n    pn.state.notifications.success('Report File created, you can download it now', duration=4000)\n\n\nfile_create.on_click(on_button_click)\n\n\n# lzhTabs = pn.Tabs(lzh, *balance_lzh_gauges.values(), align=("center", "center"))\nEnv_pane = pn.Column(co2_pane, drought_pane)\n\n# indicatorsArea = pn.GridSpec(sizing_mode="scale_both")\n# indicatorsArea = pn.Tabs(lzh, *balance_lzh_gauges.values(), ("Help",lzh_tooltip), align=("center", "center"), sizing_mode="scale_height", tabs_location="right")\n\n\n\n\nCostPane = pn.Row(\n    total_opex, total_opex_TT, total_capex, total_capex_TT, align=("center", "center")\n)\n\nverticalLine = pn.pane.HTML(\n    '''\n    <hr style="width: 1px; height: 100px; display: flex;">\n    '''\n)\n\nSupp_dem =  pn.Row(\n    total_extraction, minusSVG, total_demand, equalSVG, total_difference, total_extraction_TT)\n\napp_title = pn.pane.Markdown("## Scenario: State - 2022", styles={\n    "text-align": "right",\n    "color": "#2f4279"\n})\n\n\n\nMapTitle = pn.pane.HTML('''<b style="font-size: large; float: right; color: #2f4279;">Overijssel Zuid</b>''')\nMap_help = pn.widgets.TooltipIcon(value="De gegevens die op deze kaart worden weergegeven zijn statisch. Dit betekent dat ze niet veranderen wanneer de widgets aan de linkerkant van de app worden aangepast. Ze vertegenwoordigen bevolkingsgegevens van december 2022 en de waterwinning van 2023.\\n\\nDe Balansgebieden vertegenwoordigen gebieden binnen het Overijssel Zuid Cluster die direct worden gevoed door ten minste een productielocatie en zijn gekoppeld aan een ander balansgebied voor dynamische waterverdeling.", width=10, align='end')\n\n\nMapTitle_TT = pn.Row( Map_help,MapTitle, align="end", sizing_mode="scale_width")\n\nmain1 = pn.GridSpec(sizing_mode="scale_both")\nmain1[0, 1:2] = pn.Column(MapTitle_TT, map_pane)\n\nIndicatorsPane = pn.GridSpec(sizing_mode="stretch_both")\nIndicatorsPane[0,0:2] = pn.Column(\n    lzh, lzh_definition, textDivider0, Supp_dem, textDivider1, CostPane, textDivider2, natura_pane,\n    scroll=True\n)\nIndicatorsPane[0,2] = pn.Column(\n    Env_pane, right_pane, textDivider0, pipes_pane,\n    sizing_mode="stretch_both",\n    scroll=True\n)\n\nmain1[0, 0] = pn.Column(app_title, IndicatorsPane, sizing_mode="scale_both")\n\n\nBox = pn.template.MaterialTemplate(\n    title="Vitalens",\n    logo="https://uavonline.nl/wp-content/uploads/2020/11/vitens-logo-1.png",\n    sidebar=[tabs],\n    main=[main1],\n    header_background= '#3850a0',\n    header_color= '#f2f2ed',\n    sidebar_width = 350,\n    collapsed_sidebar = False,\n)\n\nBox.main.append(flaotingDisclaimer)\n\n\n\n\ndef total_extraction_update():\n    """\n    Update the total extraction and related indicators.\n    """\n    total_extraction.value = calculate_total_extraction()\n    total_opex.value = calculate_total_OPEX()\n    # update_balance_opex()\n    # update_balance_lzh_gauges()\n    update_indicators()\n    total_demand.value = calculate_total_Demand()\n    total_difference.value = calculate_difference()\n    calculate_affected_Sensitive_Nature()\n    map_pane\n    co2_pane.value = calculate_total_CO2_cost()\n    drought_pane.value = calculate_total_Drought_cost()\n    flaotingDisclaimer\n\ntotal_extraction_update()\nBox.servable()\n\nawait write_doc()
  `

  try {
    const [docs_json, render_items, root_ids] = await self.pyodide.runPythonAsync(code)
    self.postMessage({
      type: 'render',
      docs_json: docs_json,
      render_items: render_items,
      root_ids: root_ids
    })
  } catch(e) {
    const traceback = `${e}`
    const tblines = traceback.split('\n')
    self.postMessage({
      type: 'status',
      msg: tblines[tblines.length-2]
    });
    throw e
  }
}

self.onmessage = async (event) => {
  const msg = event.data
  if (msg.type === 'rendered') {
    self.pyodide.runPythonAsync(`
    from panel.io.state import state
    from panel.io.pyodide import _link_docs_worker

    _link_docs_worker(state.curdoc, sendPatch, setter='js')
    `)
  } else if (msg.type === 'patch') {
    self.pyodide.globals.set('patch', msg.patch)
    self.pyodide.runPythonAsync(`
    from panel.io.pyodide import _convert_json_patch
    state.curdoc.apply_json_patch(_convert_json_patch(patch), setter='js')
    `)
    self.postMessage({type: 'idle'})
  } else if (msg.type === 'location') {
    self.pyodide.globals.set('location', msg.location)
    self.pyodide.runPythonAsync(`
    import json
    from panel.io.state import state
    from panel.util import edit_readonly
    if state.location:
        loc_data = json.loads(location)
        with edit_readonly(state.location):
            state.location.param.update({
                k: v for k, v in loc_data.items() if k in state.location.param
            })
    `)
  }
}

startApplication()